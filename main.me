/*
    main.me -- Main MakeMe File for Appweb
 */

Me.load({
    makeme: '>=0.8.6',

    plugins: [ 'configuration', 'installs' ],

    blend: [
        'src/*.me',
        'src/*/*.me',
        'doc/doc.me',
        'test/test.me',
        'samples/samples.me',
        'installs/installs.me',
        '?local.me',
    ],

    modules: [ 'installs/service.es' ],

    configure: {
        requires:  [ 'osdep', 'http', 'mpr', 'pcre'],
        discovers: [ 'cgi', 'dir', 'esp', 'mdb', 'ssl', ],
        extras:    [ 'ejs', 'php', 'sqlite', 'zlib', ],
    },

    customize: [
        /* 
            The optional custom.me file is loaded after main.me is fully processed. It can
            thus override any setting. Feel free to create and customize. 
         */
        'custom.me',
    ],

    settings: {
        integrate: true,

        /*
            Installation prefix set
         */
        prefixes: 'install-prefixes',
        manifest: 'installs/manifest.me',

        /*
            Name and path of the appweb config file. Defaults to './appweb.conf' if empty.
         */
        configFile: 'appweb.conf',

        /* Must build locally to build tools */
        platforms: [ 'local' ],

        certs: {
            gendh: true
        },

        http: {
            /* Use PAM (Plugable Authentication Module) to store passwords */
            pam: true,
            webSockets: true,
        },

        ejs: {
            db: true,                                                                                     
            mail: true,                                                                                   
            mapper: true,                                                                                 
            shell: true,
            tar: true,                                                                                     
            template: true,                                                                               
            web: true,                                                                                    
            zlib: true,
        },

        esp: {
            legacy: false,
            module: false,
        },

        /*
            EST SSL stack configuration
         */
        est: {
            camellia: false,
            des: false,
            genPrime: false,
            padlock: false,
            romTables: false,
            sslClient: false,
            testCerts: false,
            xtea: false,
        },

        mpr: {
            /*
                Enable logging via mprLog to the log file
                The default is to enable logging for both debug and release builds.
             */
            logging: true,

            alloc: {
                // quota: 204800,           /* Amount of memory to allocate before a GC */
                // cache: 0,                /* Amount of memory to buffer for fast allocations */
                // check: false,            /* Memory allocation debug and stats (slow) */
            },
        },

        watchdog: {
            name: 'appman',
        },

        /*
            Tailor the optimization for size|balanced|speed
         */
        tune: 'size',

        /*
            Initial home directory for the server
         */
        serverRoot: '.',
    },

    usage: {
        'ejs.db':          'Enable database support, ejs.db (true|false)',
        'ejs.mail':        'Enable mail support, ejs.mail (true|false)',
        'ejs.mapper':      'Enable database mapper support, ejs.mapper (true|false)',
        'ejs.tar':         'Enable tar support, ejs.tar (true|false)',
        'ejs.template':    'Enable template support, ejs.template (true|false)',
        'ejs.web':         'Enable web support, ejs.web (true|false)',
        'ejs.zlib':        'Enable zlib support, ejs.zlib (true|false)',

        'est.camellia':    'Enable the Camellia cipher (true|false)',
        'est.des':         'Enable the 3DES cipher (true|false)',
        'est.genPrime':    'Enable generation of primes (true|false)',
        'est.padlock':     'Enable VIA Padlock acceleration (true|false)',
        'est.romTables':   'Enable ROM tables (true|false)',
        'est.sslClient':   'Enable SSL/TLS client side (true|false)',                                     
        'est.testCerts':   'Enable generation of test certificates (true|false)',
        'est.xtea':        'Enable XTEA (true|false)',

        'http.pam':        'Enable Unix Pluggable Auth Module (true|false)',
        'http.webSockets': 'Enable WebSockets (true|false)',                

        'mpr.logging':     'Enable application logging (true|false)',
        'mpr.debug':       'Enable debug logging (true|false)',

        'configFile':      'Path of the appweb.conf file',
        'serverRoot':      'Home directory for the server ',
    },

    targets: {
        init: {
            first: true,
            path: 'init',
            'generate-make': `
                if [ ! -d /usr/include/openssl ] ; then echo
                    echo Install libssl-dev to get /usr/include/openssl
                    exit 255
                fi
            `,
            action: ' ',
            enable: "me.platform.os == 'linux'",
        },

        cgi: {
            configurable: true,
            description: 'Common Gateway Interface Module',
            path: 'src/modules/cgiHandler.c',
            depends: [ 'libmod_cgi' ],
        },

        dir: {
            configurable: true,
            description: 'Directory Listing Module',
        },

        /*
            See src/server/server.me for the appweb targets
            See src/libappweb.me for the appweb library target
            See installs/installs.me for the install targets
         */
        projects: {
            action: `genProjects('-with openssl')`,
        },

        mine: {
            action: `genProjects('-with sqlite', 'mine', Config.OS + '-' + Config.CPU)`,
        }
    }
})
