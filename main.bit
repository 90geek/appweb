/*
    main.bit -- Main Bit File for Appweb
 */

Bit.load({
    blend: [
        "${BITS}/embedthis.bit",
        "src/deps/mpr/mpr.bit",
        "src/deps/est/est.bit",
        "src/deps/pcre/pcre.bit",
        "src/deps/http/http.bit",
        "src/deps/sqlite/sqlite.bit",
        "src/libappweb.bit",
        "src/esp/esp.bit",
        /* The ejs.bit file is optional */
        "?src/deps/ejs/ejs.bit",
        "src/modules/modules.bit",
        "src/utils/utils.bit",
        "src/server/server.bit",
        "test/test.bit",
        "package/package.bit",
        "doc/doc.bit",
    ],

    customize: [
        /* Optionally load this if present. Feel free to create and customize */
        'custom.bit',
    ],

    '+modules': [
        'bits/appweb.es',
    ],

    settings: {
        product: 'appweb',
        title: 'Embedthis Appweb',
        company: 'Embedthis',
        version: '4.3.0',
        buildNumber: '0',
        bit: '2.3.0',

        /* Must build locally to build tools */
        platforms: [ 'local' ],
        packs: [ 'bits/packs' ]
        sync: [ 'bitos', 'est', 'http', 'mpr', 'pcre', 'sqlite' ],

        '+required': [ 'bit', 'pcre'],

        /*
            Optional packs to automatically discover and configure
            OpenSSL is the default SSL stack. Pre-release EST must be explicitly requested.
         */
        '+discover': [ 'cgi', 'dir', 'doxygen', 'dsi', 'esp', 'man', 'man2html', 'openssl',
            'pmaker', 'php', 'sqlite', 'utest', 'zip' ],

        /*
            Packs to disable when using --without all
         */
        'without-all': [ 'cgi', 'dir', 'doxygen', 'dsi', 'ejscript', 'esp', 'man', 'man2html', 
            'openssl', 'pmaker', 'php', 'sqlite', ],

        /*
            Packs to disable when using --without default (generating packages)
         */
        'without-default': [ 'cgi', 'dir', 'doxygen', 'dsi', 'ejscript', 'esp', 'man', 'man2html', 
            'openssl', 'pmaker', 'php', 'sqlite', ],

        /*
            Set to true for a static (non-shared library) build
         */
        static: false,

        http: {
            /* Use PAM (Plugable Authentication Module) to store passwords */
            pam: true,

            /*
                Enable stealth options. Disable OPTIONS and TRACE methods. Not yet operational.
             */
            stealth: true,
        },

        esp: {
            /* Support the MDB database */ 
            mdb: true,

            /* Support the SQLite database */ 
            sdb: false,
        },

        mpr: {
            /*
                Enable logging via mprLog to the log file. Error messages are always enabled.
                The default is to enable logging for both debug and release builds.
             */
            logging: true,

            manager: 'appman',

            /*
                Enable debug trace and asserts to the log file.
                This is enabled by default for debug builds. 
                tracing: true,
             */
        },

        /*
            EST SSL stack configuration
         */
        est: {
            camellia: false,
            padlock: false,
            sslClient: false,
            des: false,
            testCerts: false,
            xtea: false,
            romTables: false,
            genPrime: false,
        },
    },

    usage: {
        static:         'Build with static linking (true|false)',
        'esp.mdb':      'Enable ESP MDB database support (true|false)',
        'esp.sdb':      'Enable ESP SQLite database support (true|flase)',
        'http.pam':     'Enable Unix Pluggable Auth Module (true|false)',
        'mpr.logging':  'Enable application logging (true|false)',
        'mpr.tracing':  'Enable debug tracing (true|false)',
    },

    profiles: {
        debug: { settings: { 
            debug: true, 
            assert: true,
        }, },
        release: { settings: { 
            debug: false, 
            assert: false,
        } },
    },


    packs: {
        ejscript: {},
        est: {},
        http: {
            enable: true,
            path: '${BIN}/http',
        },
        matrixssl: {},
        openssl: {},
    },

    /*
        See src/server/server.bit for the appweb targets
        See src/libappweb.bit for the appweb library target
     */
    targets: {
        install: {
            depends: ['build'],
            action: "installBinary()",
        },

        package: {
            enable: "'${OS}' == 'linux' || '${OS}' == 'macosx' || '${OS}' == 'windows'",
            depends: ['packageBinary', 'packageSource', 'packageCombo'],
        },

        packageBinary: {
            depends: ['build'],
            action: "packageBinaryFiles()",
        },

        packageSource: {
            depends: ['build'],
            action: "packageSourceFiles()",
        },

        packageCombo: {
            depends: ['build'],
            action: "packageComboFiles()",
        },

        uninstall: {
            action: "uninstallBinary()"
        },
    },
})
