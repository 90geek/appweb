/*
    main.bit -- Main Bit File for Appweb
 */

Bit.load({
    blend: [
        "${BITS}/embedthis.bit",
        "src/deps/mpr/mpr.bit",
        "src/deps/pcre/pcre.bit",
        "src/deps/http/http.bit",
        "src/deps/sqlite/sqlite.bit",
        "src/libappweb.bit",
        "src/esp/esp.bit",
        "src/modules/modules.bit",
        "src/utils/utils.bit",
        "src/server/server.bit",
        "test/test.bit",
        "package/package.bit",
        "doc/doc.bit",
    ],

    customize: [
        /* Optionally load this if present. Feel free to create and customize */
        'custom.bit',
    ],

    '+modules': [
        'bits/appweb.es',
    ],

    settings: {
		product: 'appweb',
		title: 'Embedthis Appweb',
        company: 'Embedthis',
		version: '4.0.0',
		buildNumber: 'B2',
        http_port: 80,
        ssl_port: 443,
        mdb: true,
        sdb: false,
        manager: 'appman',
        auth: 'file',
        packs: [ 'bits/packs' ]
        sync: ['http', 'mpr', 'pcre', 'sqlite'],
        'without-all': ['doxygen', 'dsi', 'ejs', 'man', 'man2html', 'php', 'pmaker', 'ssl', 'ejscript', 'php', 
            'matrixssl', 'openssl' ],
        '+required': [ 'pcre'],
        '+optional': [ 'cgi', 'dir', 'doxygen', 'dsi', 'ejs', 'ejscript', 'esp', 'man', 'man2html', 'openssl', 
            'matrixssl', 'pmaker', 'php', 'sqlite', 'ssl', 'utest' ],
    },

    usage: {
        assert: 'Enable program assertions',
        tune: 'Optimize for size|speed|balanced',
    },

    profiles: {
        debug: { settings: { 
            debug: true, 
            assert: true,
        }, },
        release: { settings: { 
            debug: false, 
            assert: false,
        } },
    },


    packs: {
        http: {
            enable: true,
            path: '${BIN}/http',
        },
    },

    targets: {
        install: {
            depends: ['build'],
            action: "installBinary()",
        },

        package: {
            enable: "'${OS}' == 'linux' || '${OS}' == 'macosx' || '${OS}' == 'windows'",
            depends: ['packageBinary', 'packageSource', 'packageCombo'],
        },

        packageBinary: {
            depends: ['build'],
            action: "packageBinaryFiles()",
        },

        packageSource: {
            depends: ['build'],
            action: "packageSourceFiles()",
        },

        packageCombo: {
            depends: ['build'],
            action: "packageComboFiles()",
        },

        uninstall: {
            action: "uninstallBinary()"
        },
    },
})
