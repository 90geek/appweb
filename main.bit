/*
    main.bit -- Main Bit File for Appweb
 */

Bit.load({
    blend: [
        '${PLATFORM}.bit',
        "${BITS}/embedthis.bit",
        "src/deps/mpr/mpr.bit",
        "src/deps/pcre/pcre.bit",
        "src/deps/http/http.bit",
        "src/deps/sqlite/sqlite.bit",
        "src/libappweb.bit",
        "src/esp/esp.bit",
        "src/modules/modules.bit",
        "src/utils/utils.bit",
        "src/server/server.bit",
        "src/samples/samples.bit",
        "test/test.bit",
        "package/package.bit",
        "doc/doc.bit",
    ],

    '+modules': [
        'bits/appweb.es',
    ],

    settings: {
		product: 'appweb',
		title: 'Embedthis Appweb',
        company: 'Embedthis',
		version: '4.0.0',
		buildNumber: 'B2',
        http_port: 80,
        ssl_port: 443,
        mdb: true,
        sdb: false,
        manager: 'appman',
        auth: 'file',
        sync: ['http', 'mpr', 'pcre', 'sqlite'],
        packs: [ 'bits/packs' ]
        without: ['doxygen', 'dsi', 'ejs', 'man', 'man2html', 'php', 'pmaker', 'ssl'],
        '+optional': [ 'cgi', 'dir', 'doxygen', 'dpkg', 'dsi', 'ejs', 'esp', 'man', 'man2html', 'openssl', 
            'matrixssl', 'pmaker', 'php', 'sqlite', 'ssl', 'ejscript' ],
    },

    usage: {
        assert: 'Enable program assertions',
        debug: 'Enable a debug build',
        tune: 'Optimize for size|speed|balanced',
    },

    profiles: {
        debug: { settings: { 
            debug: true, 
            assert: true,
        }, },
        release: { settings: { 
            debug: false, 
            assert: false,
        } },
    },


    packs: {
        http: {
            path: '${BIN}/http'
        },
    },

    targets: {
        //  MOB - move targets to the package/package.bit
        install: {
            depends: ['build'],
            depends: ['build', 'uninstall'],
            action: "
                packageBinaryFiles()
                package(bit.dir.pkg.join('bin'), 'install')
                createLinks()
                trace('Start', 'appman install enable start')
                Cmd.run('/usr/local/bin/appman install enable start')
                bit.dir.pkg.join('bin').removeAll()
            "
        },

        package: {
            depends: ['packageBinary', 'packageSource', 'packageCombo'],
        },

        packageBinary: {
            depends: ['build'],
            action: "
                packageBinaryFiles()
                package(bit.dir.pkg.join('bin'), ['tar', 'native'])
            ",
        },

        packageSource: {
            depends: ['build'],
            action: "
                let s = bit.settings
                let src = bit.dir.pkg.join('src')
                let pkg = src.join(s.product + '-' + s.version)
                safeRemove(pkg)
                pkg.makeDir()
                install(['Makefile', 'product.bit'], pkg)
                install('bits', pkg)
                install('*.md', pkg, {fold: true, expand: true})
                install('configure', pkg, {permissions: 0755})
                install('src', pkg, {
                    exclude: /\\.log$|\\.lst$|ejs.zip|\\.stackdump$|\\/cache|huge.txt|\\.swp$|\\.tmp/,
                })
                install('test', pkg, {
                    exclude: /\\.log$|\\.lst$|ejs.zip|\\.stackdump$|\\/cache|huge.txt|\\.swp$|\\.tmp/,
                })
                install('doc', pkg, {
                    exclude: /\\/xml\\/|\\/html\\/|Archive|\\.mod$|\\.so$|\\.dylib$|\\.o$/,
                })
                install('projects', pkg, {
                    exclude: /\\/Debug\\/|\\/Release\\/|\\.ncb|\\.mode1v3|\\.pbxuser/,
                })
                package(src, 'src')
            ",
        },

        packageCombo: {
            depends: ['build'],
            action: "
                let s = bit.settings
                let src = bit.dir.pkg.join('src')
                let pkg = src.join(s.product + '-' + s.version)
                safeRemove(pkg)
                pkg.makeDir()
                install('projects/buildConfig.' + bit.platform.name + '-' + bit.settings.profile, pkg.join('src/deps/appweb/buildConfig.h'))
                install('package/appweb.bit', pkg.join('src/deps/appweb/product.bit'))
                install('package/Makefile.flat', pkg.join('src/deps/appweb/Makefile'))
                install(['src/deps/mpr/mpr.h', 'src/deps/http/http.h', 'src/appweb.h', 'src/server/appwebMonitor.h',
                    'src/esp/edi.h', 'src/esp/mdb.h', 'src/esp/esp.h', 'src/deps/pcre/pcre.h'], 
                    pkg.join('src/deps/appweb/appweb.h'), {
                    cat: true,
                    filter: /^#inc.*appweb.*$|^#inc.*mpr.*$|^#inc.*http.*$|^#inc.*customize.*$|^#inc.*edi.*$|^#inc.*mdb.*$|^#inc.*esp.*$/mg,
                    title: bit.settings.title + ' Library Source',
                })
                install(['src/deps/**.c'], pkg.join('src/deps/appweb/deps.c'), {
                    cat: true,
                    filter: /^#inc.*appweb.*$|^#inc.*mpr.*$|^#inc.*http.*$|^#inc.*customize.*$|^#inc.*edi.*$|^#inc.*mdb.*$|^#inc.*esp.*$/mg,
                    exclude: /pcre|makerom|http\.c|sqlite|manager/,
                    header: '#include \"appweb.h\"',
                    title: bit.settings.title + ' Library Source',
                })
                install(['src/**.c'], pkg.join('src/deps/appweb/appwebLib.c'), {
                    cat: true,
                    filter: /^#inc.*appweb.*$|^#inc.*mpr.*$|^#inc.*http.*$|^#inc.*customize.*$|^#inc.*edi.*$|^#inc.*mdb.*$|^#inc.*esp.*$/mg,
                    exclude: /deps|server.appweb.c|esp\.c|samples|romFiles|pcre|appwebMonitor|sqlite|appman|makerom|utils|test|http\.c|sqlite|manager/,
                    header: '#include \"appweb.h\"',
                    title: bit.settings.title + ' Library Source',
                })
                install(['src/server/appweb.c'], pkg.join('src/deps/appweb/appweb.c'))
                install(['src/server/appweb.conf'], pkg.join('src/deps/appweb/appweb.conf'))
                install(['src/esp/esp.conf'], pkg.join('src/deps/appweb/esp.conf'))
                install(['src/deps/pcre/pcre.c', 'src/deps/pcre/pcre.h'], pkg.join('src/deps/appweb'))
                install(['src/deps/sqlite/sqlite3.c', 'src/deps/sqlite/sqlite3.h'], pkg.join('src/deps/sqlite'))
                package(pkg, ['src', 'combo', 'flat'])
            ",
        },

        uninstall: {
            action: "
                if (App.uid != 0) {
                    throw 'Must run as root. Use \"sudo bit install\"'
                }
                let appman = Cmd.locate('appman')
                try {
                    Cmd.run('appman stop disable uninstall')
                } catch {}
                let fileslog = bit.prefixes.productver.join('files.log')
                if (fileslog.exists) {
                    for each (let file: Path in fileslog.readLines()) {
                        vtrace('Remove', file)
                        file.remove()
                    }
                }
                fileslog.remove()
                for each (file in bit.prefixes.log.glob('*.log*')) {
                    file.remove()
                }
                for each (prefix in bit.prefixes) {
                    for each (dir in prefix.glob('**', {include: /\\/$/}).sort().reverse()) {
                        vtrace('Remove', dir)
                        dir.remove()
                    }
                    vtrace('Remove', prefix)
                    prefix.remove()
                }
                trace('Uninstall', bit.settings.title)
            "
        },
    },
})
