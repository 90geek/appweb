# 
#	Makefile.appweb -- Top level Makefile extensions Appweb
#
#	Copyright (c) Embedthis Software LLC, 2003-2012. All Rights Reserved.
#
BASE_NAME	= $(BLD_PRODUCT)-$(BLD_VERSION)-$(BLD_NUMBER)-$(BLD_HOST_DIST)-$(BLD_HOST_OS)-$(BLD_HOST_CPU)

#
#	Top level test targets to test installing and removing packages
#
testExtra:: testWarn testPackages

test-utest::
ifeq ($(BUILDING_TARGET),1)
	ulimit -c unlimited ; $(BLD_EJS) $(BLD_TOOLS_DIR)/utest -v -d $(BUILD_DEPTH)
endif

testWarn:
	[ "$(BLD_EJS)" = "" ] && echo "Install Ejscript for unit tests and re-run ./configure" ; true

testPackages:
	if [ "$(BUILD_DEPTH)" -ge 3 -a "$(BLD_TYPE)" = RELEASE ] ; then \
		if [ ! -f $(BLD_OUT_DIR)/releases/$(BASE_NAME).tgz ] ; then \
			$(call log) "[Test]" "Make package to test" ; \
			$(MAKE) package ; \
		fi ; \
		if [ -x "$(BLD_CFG_PREFIX)" ] ; then \
			$(call log) "[Test]" "Clean existing installation" ; \
			$(MAKE) uninstall ; \
		fi ; \
		$(MAKE) test-uninstalled ; \
		$(MAKE) test-install-package ; \
		$(MAKE) test-installed ; \
		$(MAKE) test-uninstall-package ; \
		$(MAKE) test-uninstalled ; \
		$(MAKE) test-install-native-package ; \
		$(MAKE) test-installed ; \
		$(MAKE) test-uninstall-native-package ; \
		$(MAKE) test-uninstalled ; \
	fi

NATIVE_BUILD = 0
ifeq    ($(BLD_HOST_OS),WIN)
	NATIVE_BUILD=1
endif
ifeq    ($(BLD_HOST_OS),MACOSX)
	NATIVE_BUILD=1
endif

test-projects:
ifeq    ($(NATIVE_BUILD),1)
	if [ "$(BUILD_DEPTH)" -ge 3 ] ; then \
		$(call log) "[Test]" "test-projects" ; \
		$(BLD_TOOLS_DIR)/nativeBuild ; \
	fi
endif

test-install-package:
	printf "%12s " "[Test]" "test-install-package ..."
	if [ ! -f $(BLD_OUT_DIR)/releases/$(BASE_NAME).tgz ] ; then \
		echo "Can't find $(BLD_OUT_DIR)/releases/$(BASE_NAME).tgz to install" ; \
	fi ; \
	set -e ; name="$(BASE_NAME).tgz" ; \
	dir=/tmp/$(BLD_PRODUCT)-$$$$ ; rm -rf $$dir ; mkdir -p $$dir ; \
	tar -C $$dir -zxf $(BLD_OUT_DIR)/releases/$$name ; \
	cd $$dir >/dev/null 2>&1 ; \
	priv "$(BLD_PRODUCT)_HEADLESS=1 ./install" || exit 255 ; \
	rm -rf $$dir
	echo PASSED

test-uninstall-package:
	printf "%12s " "[Test]" "test-uninstall-package ..."
	set -e ; name="$(BASE_NAME).tgz" ; \
	dir=/tmp/$(BLD_PRODUCT)-$$$$ ; rm -rf $$dir ; mkdir -p $$dir ; \
	tar -C $$dir -zxf $(BLD_OUT_DIR)/releases/$$name ; \
	cd $$dir >/dev/null 2>&1 ; \
	priv "$(BLD_PRODUCT)_HEADLESS=1 ./uninstall" || exit 255 ; \
	rm -rf $$dir
	echo PASSED

test-install-native-package:
	printf "%12s " "[Test]" "test-install-native-package ..."
	set -e ; \
	if [ $(BLD_HOST_OS) = WIN ] ; then \
		dir=/tmp/$(BLD_PRODUCT)-$$$$ ; rm -rf $$dir ; mkdir -p $$dir ; \
		name="$(BASE_NAME).exe.zip" ; \
		cp package/WIN/unattended.ans $(BLD_OUT_DIR)/releases/$$name "$$dir" ; cd "$$dir" ; \
		unzip -q -o $$name ; \
		echo "Dir=$$dir" >>unattended.ans ; \
		./$(BASE_NAME).exe /loadinf=/tmp/unattended.ans /silent ; \
		rm -rf $$dir ; \
	elif [ $(BLD_HOST_OS) = MACOSX ] ; then \
		hdiutil eject /Volumes/$(BLD_PRODUCT)-$(BLD_VERSION) >/dev/null 2>&1 || true ; \
		hdid $(BLD_OUT_DIR)/releases/$(BASE_NAME).dmg >/dev/null ; \
		priv installer -package /Volumes/$(BLD_PRODUCT)-$(BLD_VERSION)/$(BLD_PRODUCT).mpkg -target / >/dev/null; \
		hdiutil eject /Volumes/$(BLD_PRODUCT)-$(BLD_VERSION) >/dev/null 2>&1 ; \
	else \
		name="$(BASE_NAME).tgz" ; \
		tar -C /tmp -zxf $(BLD_OUT_DIR)/releases/$$name ; \
		priv $(BLD_PRODUCT)_HEADLESS=1 ./install ; \
	fi
	echo PASSED

STAGE_DIR=/tmp/appweb-win

test-uninstall-native-package:
	printf "%12s " "[Test]" "test-uninstall-native-package ..."
	set -e ; \
	if [ $(BLD_HOST_OS) = WIN ] ; then \
		if [ ! -x "$(BLD_PREFIX)/unins000.exe" ] ; then \
			echo "Can't find unins000.exe to uninstall" ; \
			exit 255 ; \
		fi ; \
		"$(BLD_PREFIX)/unins000.exe" /silent ; \
	else \
		name="$(BASE_NAME).tgz" ; \
		dir=/tmp/$(BLD_PRODUCT)-$$$$ ; rm -rf $$dir ; mkdir -p $$dir ; \
		tar -C $$dir -zxf $(BLD_OUT_DIR)/releases/$$name ; \
		cd $$dir >/dev/null 2>&1 ; \
		priv "$(BLD_PRODUCT)_HEADLESS=1 ./uninstall" || exit 255; \
	fi ; \
	rm -rf $$dir
	echo PASSED

test-installed:
	printf "%12s " "[Test]" "test-installed ..."
	set -e ; \
	complete=1 ; \
	for dir in "$(BLD_CFG_PREFIX)" "$(BLD_BIN_PREFIX)" "$(BLD_INC_PREFIX)" \
		"$(BLD_LIB_PREFIX)" "$(BLD_LOG_PREFIX)" "$(BLD_MAN_PREFIX)" "$(BLD_PRD_PREFIX)" \
		"$(BLD_VER_PREFIX)" "$(BLD_WEB_PREFIX)" ; \
	do \
		if [ ! -x "$$dir" ] ; then \
			echo Missing directory: $$dir ; \
			complete=0 ; \
		fi ; \
	done ; \
	[ $$complete = 0 ] && exit 255 ; \
	sleep 5 ; \
	port=$(BLD_HTTP_PORT) ; \
	http -q $$port/index.html ; \
	if [ "$(BLD_FEATURE_EJSCRIPT)" = 1 ] ; then \
		http -q $$port/test/test.ejs ; \
	fi ; \
	http -q $$port/test/test.esp ; \
	http -q $$port/test/test.php ; \
	if [ -x "$(HOMEDRIVE)/bin/sh" ] ; then \
		http -q $$port/test/test.cgi ; \
		http -q $$port/test/test.pl ; \
		http -q $$port/test/test.py ; \
	fi ; \
	echo "PASSED"

test-uninstalled:
	printf "%12s " "[Test]" "test-uninstalled ..."
	partial=0 ; \
	for dir in "$(BLD_CFG_PREFIX)" "$(BLD_BIN_PREFIX)" "$(BLD_INC_PREFIX)" "$(BLD_LIB_PREFIX)" "$(BLD_LOG_PREFIX)" \
		"$(BLD_MAN_PREFIX)" "$(BLD_PRD_PREFIX)" "$(BLD_SPL_PREFIX)" "$(BLD_VER_PREFIX)" "$(BLD_WEB_PREFIX)" ; do \
		if [ -x "$$dir" ] ; then \
			partial=1 ; \
			echo WARNING: Directory present: $$dir: ; \
			find "$$dir" -print ; \
			echo ; \
		fi ; \
	done ; \
	[ $$partial = 1 ] && exit 0 ; \
	echo "PASSED"

#
#	Convenient configure targets
#
config:
	$(call log) "[Config]" "configure"
	./configure

esp:
	./configure --host=i386-apple-darwin --without-matrixssl --without-php --disable-cgi

rom:
	./configure --host=i386-apple-darwin --build=x86_64-apple-darwin --rom --without-ssl --without-php --without-ejscript

config32:
	./configure --32 --without-matrixssl --without-php --without-ejscript --release 

cross32:
	./configure --host=i386-apple-darwin --without-matrixssl --without-php --without-ejscript

cross64:
	./configure --build=i386-apple-darwin --host=x86_64-apple-darwin --without-ssl --without-php

universal:
	./configure --host=universal-apple-darwin --build=universal-apple-darwin --without-ssl --without-php

cross-ppc:
	./configure --host=ppc-apple-darwin --without-ssl --without-php

release:
	./configure --defaults=release

release32:
	./configure --defaults=release --host=i386-apple-darwin --build=i386-apple-darwin --without-matrixssl --without-php

vx5:
	unset WIND_HOME WIND_BASE ; \
	SEARCH_PATH=/tornado ./configure --host=i386-wrs-vxworks --enable-all --without-ssl --without-php

vx vx6:
	unset WIND_HOME WIND_BASE ; \
	./configure --host=pentium-wrs-vxworks --enable-all --without-ssl --without-php

vxsim:
	unset WIND_HOME WIND_BASE ; \
	SEARCH_PATH=/tornado ./configure --host=simnt-wrs-vxworks --without-ssl --without-php

wince:
	./configure --host=arm-ms-wince --shared --without-php --without-ssl --config=flat --disable-auto-compile \
		--disable-cross-compiler

#
#	Samples for cross compilation
#	
vx5env:
	ARCH=386 ; \
	WIND_HOME=c:/tornado ; \
	WIND_BASE=$$WIND_HOME ; \
	WIND_GNU_PATH=$$WIND_BASE/host ; \
	AR=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/ar$${ARCH}.exe \
	CC=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/cc$${ARCH}.exe \
	LD=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/ld$${ARCH}.exe \
	NM=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/nm$${ARCH}.exe \
	RANLIB=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/ranlib$${ARCH}.exe \
	STRIP=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/strip$${ARCH}.exe \
	IFLAGS="-I$$WIND_BASE/target/h -I$$WIND_BASE/target/h/wrn/coreip" \
	SEARCH_PATH=/tornado ./configure --host=i386-wrs-vxworks --enable-all --without-ssl --without-php

vx6env:
	ARCH=pentium ; \
	WIND_HOME=c:/WindRiver ; \
	VXWORKS=vxworks-6.3 ; \
	WIND_BASE=$$WIND_HOME/$$VXWORKS ; \
	PLATFORM=i586-wrs-vxworks ; \
	WIND_GNU_PATH=$$WIND_HOME/gnu/3.4.4-vxworks-6.3 ; \
	AR=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/ar$${ARCH}.exe \
	CC=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/cc$${ARCH}.exe \
	LD=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/bin/cc$${ARCH}.exe \
	NM=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/$${PLATFORM}/bin/nm.exe \
	RANLIB=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/$${PLATFORM}/bin/ranlib.exe \
	STRIP=$$WIND_GNU_PATH/$$WIND_HOST_TYPE/$${PLATFORM}/bin/strip.exe \
	CFLAGS="-I$$WIND_BASE/target/h -I$$WIND_BASE/target/h/wrn/coreip" \
	./configure --host=i386-wrs-vxworks --enable-all --without-ssl --without-php

vxenv:
	wrenv -p vxworks-6.3 -f sh -o print_env

cygwin:
	./configure --cygwin --defaults=dev --enable-test --disable-samples \
	--without-php --without-matrixssl --without-openssl

freebsd:
	./configure --defaults=dev --enable-test --disable-samples --without-php --without-matrixssl --without-openssl

#
#	Using ubuntu packages: uclibc-toolchain, libuclibc-dev
#	Use dpkg -L package to see installed files. Installed under /usr/i386-uclibc-linux
#
uclibc:
	PREFIX=i386-uclibc-linux; \
	DIR=/usr/i386-uclibc-linux/bin ; \
	AR=$${DIR}/$${PREFIX}-ar \
	CC=$${DIR}/$${PREFIX}-gcc \
	LD=$${DIR}/$${PREFIX}-gcc \
	NM=$${DIR}/$${PREFIX}-nm \
	RANLIB=$${DIR}/$${PREFIX}-ranlib \
	STRIP=$${DIR}/$${PREFIX}-strip \
	CFLAGS="-fno-stack-protector" \
	CXXFLAGS="-fno-rtti -fno-exceptions" \
	BUILD_CC=/usr/bin/cc \
	BUILD_LD=/usr/bin/cc \
	./configure --host=i386-pc-linux --enable-all

#
#	Don't use these targets. Use make ROOT_DIR=/path install-min
#
VXDEPLOY	:= target
CEDEPLOY	:= ctarget

vxdeploy:
	[ -f .embedthis ] && subst v: c:/home/mob/hg/appweb/target >/dev/null ; true
	mkdir -p $(VXDEPLOY)/web $(VXDEPLOY)/logs $(VXDEPLOY)/cgi-bin
	rm -f $(VXDEPLOY)/*$(BLD_EXE)
	cp $(BLD_BIN_DIR)/$(BLD_HOST_SYSTEM)/*$(BLD_EXE) $(VXDEPLOY)
	[ -f $(BLD_BIN_DIR)/$(BLD_HOST_SYSTEM)/cgiProgram$(BLD_EXE) ] && \
		cp $(BLD_BIN_DIR)/$(BLD_HOST_SYSTEM)/cgiProgram$(BLD_EXE) $(VXDEPLOY)/cgi-bin ; true
	[ $(BLD_STATIC) = 0 ] && cp $(BLD_LIB_DIR)/$(BLD_HOST_SYSTEM)/*$(BLD_EXE) $(VXDEPLOY) ; true
	cp $(BLD_LIB_DIR)/$(BLD_HOST_SYSTEM)/*.mod $(VXDEPLOY)
	sed -e 's/UploadDir.*/UploadDir ./' < src/server/template/flat/appweb.conf >$(VXDEPLOY)/appweb.conf
	cp -r src/server/*.db $(VXDEPLOY)
	cp -r src/server/mime.types $(VXDEPLOY)
	cp -r src/server/web/* $(VXDEPLOY)/web
	cd $(VXDEPLOY)/web ; find . -name '*.ejs' | grep -v mgmt | sed 's/.\///' | xargs -i -t ajsweb compile {}
	cd $(VXDEPLOY)/demo ; ajsweb compile

IDE	:= projects/WINCE/appweb-dynamic/'Pocket PC 2003 (ARMV4)'/Debug
cedeploy:
	[ -f .embedthis ] && subst v: c:/home/mob/hg/appweb/target >/dev/null ; true
	mkdir -p $(CEDEPLOY)/web $(CEDEPLOY)/logs $(CEDEPLOY)/cgi-bin
	rm -f $(CEDEPLOY)/*$(BLD_EXE)
	[ -f $(BLD_BIN_DIR)/$(BLD_HOST_SYSTEM)/cgiProgram$(BLD_EXE) ] && \
		cp $(BLD_BIN_DIR)/$(BLD_HOST_SYSTEM)/cgiProgram$(BLD_EXE) $(CEDEPLOY)/cgi-bin ; true
	[ $(BLD_STATIC) = 0 ] && cp $(BLD_LIB_DIR)/$(BLD_HOST_SYSTEM)/*$(BLD_EXE) $(CEDEPLOY) ; true
	cp $(BLD_LIB_DIR)/$(BLD_HOST_SYSTEM)/*.mod $(CEDEPLOY)
	sed -e 's/UploadDir.*/UploadDir ./' < src/server/template/flat/appweb.conf >$(CEDEPLOY)/appweb.conf
	cp -r src/server/*.db $(CEDEPLOY)
	cp -r src/server/mime.types $(CEDEPLOY)
	cp -r src/server/web/* $(CEDEPLOY)/web
	cd $(CEDEPLOY)/web ; find . -name '*.ejs' | grep -v mgmt | sed 's/.\///' | xargs -i -t ajsweb compile {}
	cd $(CEDEPLOY)/demo ; ajsweb compile
	cp $(IDE)/*$(BLD_SHOBJ) $(CEDEPLOY)
	cp $(IDE)/*$(BLD_EXE) $(CEDEPLOY)

#	cp $(BLD_LIB_DIR)/$(BLD_HOST_SYSTEM)/*$(BLD_SHOBJ) $(CEDEPLOY)
#	cp $(BLD_BIN_DIR)/$(BLD_HOST_SYSTEM)/*$(BLD_EXE) $(CEDEPLOY)

REMOTE	:= \\\\castor\\vxworks
remoteDeploy:
	[ -f .embedthis ] && subst r: $(REMOTE) >/dev/null ; true
	mkdir -p $(REMOTE)/web $(REMOTE)/logs $(REMOTE)/cgi-bin
	rm -f $(REMOTE)/*$(BLD_EXE)
	cp bin/$(BLD_HOST_SYSTEM)/*$(BLD_EXE) $(REMOTE)
	cp bin/$(BLD_HOST_SYSTEM)/cgiProgram$(BLD_EXE) $(REMOTE)/cgi-bin
	[ "$(BLD_STATIC)" = 0 ] && cp modules/$(BLD_HOST_SYSTEM)/*$(BLD_EXE) $(REMOTE) ; true
	cp -r src/server/template/flat/appweb.conf $(DEPLOY)/appweb.conf
	cp -r src/server/*.db $(REMOTE)
	cp -r src/server/web/* $(REMOTE)/web

ifeq ($(shell [ -f out/include/buildConfig.h ] && echo found),found)
uclinuxCheck: 
	@if [ "$(UCLINUX_BUILD_USER)" = 1 ] ; \
	then \
		rm -f build/buildConfig.defaults ; \
		BLD_PRODUCT=appweb ; \
		echo "    ln -s $$BLD_PRODUCT/uclinux.defaults build/buildConfig.defaults" ;\
		ln -s $$BLD_PRODUCT/uclinux.defaults build/buildConfig.defaults ; \
		if [ ! -f build/buildConfig.cache -o ../../.config -nt out/include/buildConfig.h ] ; \
		then \
			if [ "$$CONFIG_USER_APPWEB_DYNAMIC" = "y" ] ; \
			then \
				SW="$$SW" ; \
			else \
				SW="$$SW " ; \
			fi ; \
			if [ "$$CONFIG_USER_APPWEB_SSL" = "y" ] ; \
			then \
				SW="$$SW --with-openssl=../../lib/libssl" ; \
			elif [ "$$CONFIG_USER_APPWEB_MATRIXSSL" = "y" ] ; \
			then \
				SW="$$SW --with-matrixssl=../../lib/matrixssl" ; \
			else SW="$$SW --without-ssl" ; \
			fi ; \
			if [ "$$CONFIG_USER_APPWEB_CGI" = "y" ] ; \
			then SW="$$SW --enable-cgi" ; \
			else SW="$$SW --disable-cgi" ; \
			fi ; \
			echo "    ./configure $$SW " ; \
			./configure $$SW; \
			echo "  $(MAKE) -S $(MAKEF)" ; \
			$(MAKE) -S $(MAKEF) ; \
		fi ; \
	else \
		echo "Must run configure first" ; \
		exit 2 ; \
	fi
endif
