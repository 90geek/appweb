#!/bin/bash
#
#   configure.appweb -- Build configuration script for Embedthis Appweb Server
#   Copyright (c) Embedthis Software LLC, 2003-2012. All Rights Reserved.
#
#   This script is included by configure and is never run stand-alone.
#

applyDependencies()
{
    local file status

    if [ "$CFG_WITHOUT_SSL" = 1 ] ; then
        without matrixssl
        without openssl
    fi
}


manageFeatures()
{
    local file status

    BLD_FEATURE_MPR=1
    if [ "$BLD_FEATURE_ROMFS" = 1 -a "$BLD_CROSS" = 0 ] ; then
        echo
        echo "ROM-based storage is only supported if doing cross-compilation"
        echo
        exit 255
    fi
    if [ "$BLD_FEATURE_EJSCRIPT" = 1 ] ; then
        if [ "$BLD_FEATURE_FLOAT" != 1 ] ; then
            echo " "
            echo "Floating point support is required for Ejscript."
            echo "Enabling the floating point support."
            BLD_FEATURE_FLOAT=1
        fi
        BLD_FEATURE_SQLITE=1
        BLD_SQLITE_BUILTIN=1
    fi
    if [ "$BLD_FEATURE_ESP" = 1 ] ; then
        if [ "$BLD_FEATURE_PCRE" != 1 ] ; then
            echo " "
            echo "PCRE (Regular expression support is required for ESP."
            echo "Enabling the PCRE support."
            CFG_HOST_PCRE=1
            BLD_FEATURE_PCRE=1
        fi
    fi
    if [ "$BLD_FEATURE_AUTH_PAM" = 1 ] ; then
        if [ "$BLD_HOST_OS" = WIN  -o "$BLD_HOST_OS" = VXWORKS ] ; then
            echo " "
            echo "PAM authorization is only support on UNIX"
            BLD_FEATURE_AUTH_PAM=0
            BLD_FEATURE_AUTH_FILE=1
        fi
    fi
    if [ "$BLD_FEATURE_AUTH_PAM" = 0 -a "$BLD_FEATURE_AUTH_FILE" = 0 ] ; then
        echo " "
        echo "Must have one auth backend enabled (PAM or FILE)."
        echo "Enabling the auth-file authorization backend"
        BLD_FEATURE_AUTH_FILE=1
    fi
    if [ "$BLD_FEATURE_SQLITE" = 0 -a "$BLD_FEATURE_SDB" = 1 ] ; then
        echo " "
        echo "Must have configure with SQLite to use SDB."
        echo "Disabling SDB"
        BLD_FEATURE_SDB=0
    fi
    if [ "$BLD_FEATURE_ESP" = 0 ] ; then
        BLD_FEATURE_MDB=0
        BLD_FEATURE_SDB=0
    fi
}


createFeatureConfig()
{
    NAME=$1

    cat >>$NAME <<!EOF_FEATURE_CONFIG1
#
#   Appweb Feature Selection
#
BLD_APPWEB_PRODUCT=1
BLD_FEATURE_AUTH_FILE=$BLD_FEATURE_AUTH_FILE
BLD_FEATURE_AUTH_PAM=$BLD_FEATURE_AUTH_PAM

#
#   Default port configuration
#
BLD_HTTP_PORT=$BLD_HTTP_PORT
BLD_SSL_PORT=$BLD_SSL_PORT

#
#   Embedded Server Pages (ESP) options
#
BLD_FEATURE_MDB=$BLD_FEATURE_MDB
BLD_FEATURE_SDB=$BLD_FEATURE_SDB

#
#   Manager name
#
BLD_MANAGER="appman"

#
#   Http program name
#
BLD_HTTP="http"

!EOF_FEATURE_CONFIG1

    if [ "$BLD_FEATURE_EJSCRIPT" = 1 ] ; then
        cat >>$NAME <<!EOF_FEATURE_CONFIG2
#
#   Ejscript configuration
#
BLD_FEATURE_SQLITE=$BLD_FEATURE_SQLITE
BLD_SQLITE_BUILTIN=$BLD_SQLITE_BUILTIN
BLD_SQLITE_PRODUCT=0
BLD_FEATURE_EJSCRIPT_ALL_IN_ONE=$BLD_FEATURE_EJSCRIPT_ALL_IN_ONE

!EOF_FEATURE_CONFIG2
    fi
}


emitExtraComponents()
{
    local kind

    kind=$1
}


help()
{
    cat <<!EOF_HELP

Additional ESP Features:
  --enable-edi             Enable the embedded database interface
  --disable-ed             Disable the embedded database interface
  --enable-mdb             Enable the memory database support
  --disable-mdb            Disable the memory database support
  --enable-sdb             Enable the SQLite database support
  --disable-sdb            Disable the SQLite database support

Additional Appweb Features:
  --auth=[pam|file]        Build with file or PAM-based authorization support.
  --port=PORT              Set the default HTTP port to use for the product.
  --sslPort=PORT           Set the default SSL port to use for the product.
  --webDir=PATH            Set the directory for web documents (DocumentRoot).

Optional Components: cgi, dir, ejscript, esp, matrixssl, openssl, php, sqlite

  --with-NAME=[DIR]        Support the NAME component. DIR is the base 
                           directory to find the component.  The 
                           build/components/NAME files describe compile and 
                           linker switches. 
  --without-NAME           Do not include support for the NAME component.

Examples:
  ./configure --with-openssl=/usr/src/openssl

!EOF_HELP
}


parseArg()
{
    local ARG SW lower

    ARG="${1#*=}"
    [ "$ARG" = "$1" ] && ARG=

    SW=`echo ${1#--} | tr '[A-Z]' '[a-z]'`
    lower=`echo ${ARG#--} | tr '[A-Z]' '[a-z]'`
    case ${SW} in
    auth=*)
        if [ "$lower" = "file" ] ; then
            BLD_FEATURE_AUTH_FILE=1
            BLD_FEATURE_AUTH_PAM=0
        elif [ "$lower" = "pam" ] ; then
            BLD_FEATURE_AUTH_FILE=0
            BLD_FEATURE_AUTH_PAM=1
        else
            echo "Unknown authorization backend for --auth"
            exit 255
        fi
        ;;
    disable-all)
        BLD_DISABLE_ALL=1
        BLD_FEATURE_ASSERT=0
        BLD_FEATURE_AUTH_FILE=1
        BLD_FEATURE_AUTH_PAM=0
        BLD_FEATURE_LEGACY_API=0
        BLD_FEATURE_MDB=0
        BLD_FEATURE_ROMFS=0
        BLD_FEATURE_SDB=0
        ;;
    disable-edi)
        BLD_FEATURE_MDB=0
        BLD_FEATURE_SDB=0
        ;;
    disable-mdb)
        BLD_FEATURE_MDB=0
        ;;
    disable-sdb)
        BLD_FEATURE_SDB=0
        ;;
    enable-all)
        BLD_FEATURE_ASSERT=1
        BLD_FEATURE_AUTH_FILE=1
        BLD_FEATURE_AUTH_PAM=1
        BLD_FEATURE_LEGACY_API=1
        BLD_FEATURE_ROMFS=0
        if [ "$BLD_HOST_OS" != WIN -a "$BLD_HOST_OS" != VXWORKS ] ; then
            BLD_FEATURE_AUTH_PAM=1
        else
            BLD_FEATURE_AUTH_PAM=0
        fi
        ;;
    enable-edi)
        BLD_FEATURE_MDB=1
        BLD_FEATURE_SDB=1
        ;;
    enable-mdb)
        BLD_FEATURE_MDB=1
        ;;
    enable-sdb)
        BLD_FEATURE_SDB=1
        ;;
    port=*)
        BLD_HTTP_PORT=${ARG}
        ;;
    sslport=*)
        BLD_SSL_PORT=${ARG}
        ;;
    *)  
        return 1
        ;;
    esac
    return 0
}
