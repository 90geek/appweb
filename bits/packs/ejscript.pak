/*
    ejscript.bit - Ejscript package for Bit
 */

pack('ejscript', 'Ejscript Web Framework')
let path = bit.packs.ejscript.path
let edir = bit.dir.src.join('src/deps/ejs')

if (path) {
    if (path.startsWith('http:')) {
        /*
            Auto download ejs
         */
        let http = Http
        let tfile = bit.dir.src.join('src/deps/ejs.tgz')
        let fp = File(tfile, 'w')
        http.get(path)
        buf = new ByteArray
        while (http.read(buf) > 0) {
            fp.write(buf)
        }
        fp.close()
        if (http.status != 200) {
            throw "Cannot download Ejscript from " + path
        }
        http.close()
        edir.removeAll()
        edir.makeDir()
        let home = App.dir
        try {
            App.chdir(edir)
            // Cmd('tar -C src/deps/ejs --strip-components 2 -zxf src/deps/ejs.tgz')
            Tar('src/deps/ejs.tgz').extract()
            let dir = bit.dir.join('src/deps').glob('ejs-*')
            dir.rename(edir)
        } finally {
            App.chdir(home)
        }
        tfile.remove()
    }
}

let cfg
if (Path('src/deps/ejs/ejsLib.c').exists) {
    /*  Internal ejs distribution */
    let dir = bit.dir.src.join('src/deps/ejs')
    cfg = {
        dir: dir,
        includes: [ dir ],
        libraries: [ 'mpr', 'http', 'pcre' ]
    }
} else {
    /*  External ejs distribution */
    if (path && !path.exists) {
        throw 'Can\'t find Ejscript at ' + path
    }
    let search
    if (path) {
        search = path.glob('*/bin') + path.glob('*/inc')
    } else {
        search = [ bit.dir.packs.join('ejs'), '/usr/lib/ejs/latest/lib', '/usr/include' ]
    }
    let libdir = probe(Path('libejs').joinExt(bit.ext.shobj), {search: search}).absolute
    let libraries = libdir.glob('libejs*') + libdir.glob('libmpr*') + libdir.glob('libpcre*') + 
        libdir.glob('libhttp*') + libdir.glob('ejs*' + bit.ext.shobj) + libdir.glob('libsqlite3*')
    let incdir = probe('ejs.h', {search: search}).absolute
    let imports = libdir.glob('ejs*.mod') + libraries + incdir.glob('ejs*.h') + 
        incdir.glob('mpr.h') + incdir.glob('http.h') + incdir.glob('pcre.h') + incdir.glob('sqlite3.h')
    cfg = {
        dir: path,
        includes: [ incdir ],
        libraries: [ 'ejs', 'mpr', 'mprssl', 'http', 'pcre' ],
        libpaths: [ libdir.parent ],
        imports: imports,
    }
}
if (bit.packs.sqlite && bit.packs.sqlite.enable) {
    cfg.libraries.push('sqlite3')
}
if (bit.packs.ssl && bit.packs.ssl.enable) {
    cfg.libraries.push('mprssl')
}
Bit.load({packs: { ejscript: cfg }})

/*
    Disable building libraries that are imported from Ejscript
 */
let prebuilt = ['libmpr', 'libmprssl', 'libhttp', 'libpcre', 'libsqlite3']
for each (tname in prebuilt) {
    bit.targets[tname] ||= {}
    bit.targets[tname].built = true
}
