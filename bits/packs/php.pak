/*
    php.pak -- PHP package search
 */

pack('php', 'PHP Web Framework')
let cfg
let path = bit.packs.php.path
if (!path) {
    if (bit.dir.packs.join('php/latest').exists && Config.OS != 'windows') {
        path = bit.dir.packs.join('php/latest')
    } else {
        let phpver = 'php-5.3*'
        let versions = sortVersions(bit.dir.packs.join('php').files(phpver))
        if (versions.length == 0) {
            throw 'Can\'t find php'
        }
        path = versions[0]
    }
}

if (bit.platform.os == 'windows') {
    let search = [
        path.join('x64/Release_TS'),
        path.join('x64/Release'),
        path.join('Release_TS'),
        path.join('Release'),
        path.join('Debug_TS'),
        path.join('Debug'),
    ]
    let reldir = probe('php.exe', {search: search}).absolute
    let names = { Release_TS: 'php5ts.dll', Release: 'php5.dll', Debug_TS: 'php5ts_debug.dll', Debug: 'php5.dll' }
    let lib = probe(names[reldir.basename], {fullpath: true, search: search}).absolute
    let dir = lib.parent.parent
    search = [path]
    let incdir = probe('main/php.h', {search: search}).absolute
    cfg = {
        dir: dir,
        path: dir,
        includes: [ incdir, incdir.join('main'), incdir.join('Zend'), incdir.join('TSRM') ],
        libraries: [ 'php5ts.lib' ],
        linker: [ '-libpath:' + lib.parent ],
        imports: lib.parent.files('php5ts.*'),
    }

} else if (bit.platform.os == 'macosx') {
    let search = [path.join('.libs'), '/usr/lib']
    let lib = probe('libphp5.dylib', {fullpath: true, search: search}).absolute
    let dir = lib.parent.parent
    search = [path.join('main'), '/usr/include']
    let incdir = probe('php.h', {search: search}).absolute.parent
    cfg = {
        dir: dir,
        path: dir,
        includes: [ incdir, incdir.join('main'), incdir.join('Zend'), incdir.join('TSRM') ],
        libraries: [ 'php5' ],
        linker: [ '-L' + lib.parent ],
        imports: lib.parent.files('libphp5*.dylib')
    }

} else {
    let search = [path.join('.libs'), '/usr/lib', '/lib'] + Path('/lib').files('*-linux-gnu')
    let lib = probe('libphp5.so', {fullpath: true, search: search}).absolute
    let dir = lib.parent
    search = [path.join('main'), '/usr/include']
    let incdir = probe('php.h', {search: search}).absolute.parent
    cfg = {
        dir: dir,
        path: dir,
        includes: [ incdir, incdir.join('main'), incdir.join('Zend'), incdir.join('TSRM') ],
        libraries: [ 'php5' ],
        linker: [ '-L' + lib.parent ],
        imports: lib.parent.files('libphp5*.so*')
    }
}

let template = {packs: { php: cfg}}
Bit.load(template)
