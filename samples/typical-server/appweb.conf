#
#   appweb.conf -- Appweb Configuration for a typical server
#   
#   See the max-server sample for more appweb.conf configuration directives.
#
#   This configuration file controls the operation of the Appweb server. The 
#   order of configuration directives matters as this file is parsed only once.
#

#
#   Define the logging configuration first so any errors are logged.
#   This log file is for errors and debug trace for the whole server 
#   including virtual hosts. Add a timestamp every 1 hour.
#
#   ErrorLog "error.log" size=10MB level=2 backup=5 append anew stamp=1hr

ErrorLog "stdout" level=2

#
#   Bind Appweb to listen for incoming requests on this address. Formats 
#   include (IP, IP:PORT, PORT). If an IP address is omitted, Appweb will 
#   listen on all interfaces. If a port is omitted, then port 80 is used.
#   If the O/S has a dual-stack network, then connections on both IPv4 
#   and IPv6 will be accepted. Use [::]:port to explicitly listen to only
#   IPv6 requests. [::1] is the IPv6 loopback. Use 0.0.0.0:port to listen
#   to only IPv4 requests.
#
Listen 8080

#
#   Name of the server to use for redirects and error responses to clients. 
#   Uncomment this line and replace it with the public name of your server. 
#   This host name and port do not get used for listening on sockets. If 
#   unspecified, Appweb will use the IP address for the host name.
#   NOTE: Only define a ServerName if you are not using a ListenSecure
#   directive for SSL. Otherwise, redirects will always go to the address
#   you define here regardless of http or https. If you need to use a 
#   ServerName with SSL, use a VirtualHost to define your SSL endpoint.
#
#   ServerName http://example.com

#
#   Location for documents for the primary server host. Routes and virtual
#   hosts may define their own document root.
#
Documents web

#
#   Default directory index to serve when a directory is requested.
#
DirectoryIndex index.html

#
#   Select the type of authentication password store. Select "pam" on unix for the system
#   password store. Set to "internal" for the file-based password store in auth.conf.
#
#   AuthStore pam

#
#   Authorization directives. You can add these directives to apply to the
#   entire server and all routes after this point. Alternatively, put inside a
#   VirtualHost or Route block to localize to that block. By convention, the
#   auth.conf file contains User and Role definitions. This can be used when using the
#   "internal" auth store to provide users, passwords and roles. If using the "pam" store,
#   it can be used to provide roles.
#
include auth.conf

#
#   Notes on the request processing pipeline. The pipeline consists of a set 
#   of stages comprised of a handler, possible filters and one network 
#   connector. 
#
#   The request processing pipeline can be configured at various levels: 
#   globally, virtual hosts and location blocks. At each level, a set of 
#   processing stages can be defined. Inner levels inherit the pipeline from 
#   the outer levels. The pipeline can be reset at a level by using 
#   ResetPipeline. Each stage may be defined for all requests or only for a 
#   specific file extension or location path prefix.
#
#   If you use the AddConnector, AddFilter or AddHandler directives, the 
#   stage is defined for both input and output processing. For filters you can
#   use AddInputFilter AddOutputFilter directives to define for a single 
#   direction.
#
#   Multiple handlers can be defined, but only the first matching handler will
#   be activated when a request is processed.
#
SetConnector netConnector
AddOutputFilter rangeFilter
AddOutputFilter chunkFilter

#
#   Select the fileHandler for static files and as a catch-all when all other 
#   handlers fail.
#
AddHandler fileHandler html gif jpeg jpg png pdf ico css js  ""

#
#   For CGI scripts, such as your Perl scripts make sure that you have 
#   "#!/PerlPath" as the first line. This works on Windows as well.
#   The .bat and .cmd extensions are really only for Windows.
#   
<if CGI_MODULE>
    LoadModule cgiHandler libmod_cgi

    #
    # WARNING: for information about CGI security, read:  http://www.w3.org/Security/faq/wwwsf4.html
    #
    AddHandler cgiHandler exe cgi cgi-nph out bat cmd pl py

    ScriptAlias /cgi-bin/ "cgi-bin"

    #
    #   These actions specify the program to run for each Perl or Python 
    #   script. They map to the extensions specified in the mime.types for for 
    #   these mime types. Alternatively, you may use put all your scripts in 
    #   the subdirectories specified by the releavant Route blocks below.
    #   For perl and python, you can also put "#!/path/to/program" as the first 
    #   line. This works on Windows as well. The .bat and .cmd extensions are 
    #   really only for Windows. For Windows, update the program paths with
    #   the right paths.
    #   
    Action application/x-appweb-perl /usr/bin/perl
    Action application/x-appweb-python /usr/bin/python
    Action application/x-appweb-lua /usr/bin/lua
    Action application/x-appweb-ruby /usr/bin/ruby
    LimitProcesses 10
<else>
    AddHandler errorHandler exe cgi cgi-nph out bat cmd pl py
</if>

#
#   Enable the action handler for simple URI to "C" bindings
#   This is used by the web-form Auth mechanism
#
<Route ^/action/>
    SetHandler actionHandler
</Route>

<if EJS_MODULE>
    LoadModule ejsHandler libmod_ejs
    AddHandler ejsHandler ejs es
<else>
    AddHandler errorHandler ejs es
</if>

<if ESP_MODULE>
    LoadModule espHandler libmod_esp
    AddHandler espHandler esp

    #
    #   Store compiled content in the "cache" directory
    #   Defaults to the /var/spool/appweb/cache on unix.
    #
    EspDir cache "cache"

    #
    #   Update modified source by automatically recompiling
    #
    EspUpdate on

    #
    #   Send server errors back to the client
    #
    EspShowErrors on

    #
    #   Keep intermediate source code in the cache directory
    #
    EspKeepSource on

    #
    #   Include esp compilation rules
    #
    include esp.conf
<else>
    AddHandler errorHandler esp
</if>

<if PHP_MODULE>
    LoadModule phpHandler libmod_php
    AddHandler phpHandler php
<else>
    AddHandler errorHandler php
</if>

#
#   Disable the trace method to enhance security
#
TraceMethod off

#
#   Set a default response cache lifespan
#
Cache 1day 

#
#   Cache static content at the client
#   This sets an cache expiry period (secs) for content. Clients will refresh
#   only if content is stale in their local cache. This defines a set of file
#   extensions for which Expires/Cache-Control headers will be generated.
#
Cache client=1day extensions="html,gif,jpeg,jpg,png,pdf,ico,js"


#
#   Session state duration.
#
SessionTimeout 30mins

#
#   Maximum duration to parse the request headers
#
RequestParseTimeout 5sec

#
#   Maximum request duration.
#
RequestTimeout 10mins

#
#   Maximum request and connection inactivity duration
#
InactivityTimeout 1min

#
#   Request timeout when appweb is terminating or restarting
#
ExitTimeout 30secs

#
#   Maximum number of worker threads in the Appweb worker pool. Must have at 
#   least one.  One thread will effectively single-thread the server. Appweb 
#   will automatically adjust the number of workers between the minimum 
#   specified by the MinWorkers and the maximum specified here. Every ten 
#   minutes, Appweb will prune workers that have been idle for five minutes. 
#   Appweb has two non-worker threads: one for the master event loop and one 
#   for the garbage collector. So the total number of Appweb threads will be 
#   two plus the number of active workers.
#
LimitWorkers 5

#
#   Memory allocation error policy. This defines what Appweb will do if 
#   the memory limit defined by LimitMemory is exceeded. Choose from "prune" 
#   to prune non-critical response cache and session state, but continue on.
#   This make the memory limit a soft limit. Or select "restart" to do a
#   graceful shutdown and then restart anew. Or "exit" to immediately exit 
#   the application.
#
MemoryPolicy restart

#
#   Maximum buffer size for pipeline queues
#
LimitBuffer 32K

#
#   Maximum application memory. Invokes MemoryPolicy if exceeded.
#    Redline at 95%.
#
LimitMemory 100MB

#
#   Maximum cache size for response caching and sessions
#
LimitCache 10MB

#
#   Maximum item size that can be cached
#
LimitCacheItem 200K

#
#   Maximum number of simultaneous client systems. Set to zero for unlimited.
#
LimitClients 20

#
#   Maximum number of open files/sockets on unix systems. 
#   Set to zero for the maximum possible value. 
#
LimitFiles 0

#
#   Maximum number of simultaneous requests. Set to zero for unlimited.
#
LimitRequests 50

#
#   Maximum number of simultaneous requests per client. This helps prevent denial of service attacks.
#
LimitRequestsPerClient 20

#
#   Number of HTTP requests to accept on a single TCP/IP connection
#   Reduce this number to minimize the chance of DoS attacks.
#
LimitKeepAlive 200

#
#   Maximum size of the total request content body (includes header)
#  
LimitRequestBody 2MB

#
#   Maximum size of a request form
#  
LimitRequestForm 32K

#
#   Maximum size of request header
#  
LimitRequestHeader 32K

#
#   Maximum number of request header lines 
#  
LimitRequestHeaderLines 64

#
#   Maximum size of the maximum response body
#  
LimitResponseBody 2GB

#
#   Maximum response chunk size
#
LimitChunk 64K

#
#   Maximum uploaded file size
#
LimitUpload 2GB

#
#   Maximum request URI size
#
LimitUri 8K

#
#   The user name and group to become. The fake name _default_ will change
#   user/group to the Appweb default user/group if running as root/adminstrator.
#   This is www on MAC, nobody/nogroup on Linux, and administrator on Windows. 
#   The fake name _unchanged_ means don't change the user or group. 
#   NOTE: ESP and EJS require write access to the cache directory If you wish to 
#   backup log files, you must have write permission to the log file directory. 
#
GroupAccount _default_
UserAccount _default_

#
#   Include per-app configuration
#
Include apps/*.conf
