/*
    product.bit -- Product Bit File for Appweb
 */

Bit.load({
    blend: [
        "src/deps/mpr/mpr.bit",
        "src/deps/pcre/pcre.bit",
        "src/deps/http/http.bit",
        "src/deps/sqlite/sqlite.bit",
        "src/libappweb.bit",
        "src/esp/esp.bit",
        "src/modules/modules.bit",
        "src/utils/utils.bit",
        "src/server/server.bit",
        "src/test/test.bit",
        "doc/doc.bit",
        "${BITS}/embedthis.bit",
    ],

    settings: {
		product: 'appweb',
		title: 'Embedthis Appweb',
        company: 'Embedthis',
		version: '4.0.0',
		buildNumber: 'B2',
        http_port: 80,
        ssl_port: 443,
        mdb: true,
        sdb: false,
        manager: 'appman',
        auth: 'file',
        sync: ['http', 'mpr', 'pcre', 'sqlite'],
        packs: [ 'bits/packs' ]
    },

    usage: {
        assert: 'Enable program assertions',
        debug: 'Enable a debug build',
        tune: 'Optimize for size|speed|balanced',
    },

    profiles: {
        debug: { settings: { 
            debug: true, 
            assert: true,
        }, },
        release: { settings: { 
            debug: false, 
            assert: false,
        } },
    },

    '+optional': [ 'cgi', 'dir', 'doxygen', 'dsi', 'ejs', 'esp', 'man', 'man2html', 'openssl', 
        'matrixssl', 'pmaker', 'php', 'sqlite', 'ssl', 'ejscript' ],

    packs: {
        http: {
            path: '${BIN}/http'
        },
    },

    targets: {
        /*
            MOB - how can this do install, uninstall
            Options:
                install
                uninstall
                package
                flat

            TODO:
                init.d, init, ssl
         */
        package: {
            depends: ['packageBinary', 'packageSource'],
        },

        packageBinary: {
            depends: ['build'],
            action: "
                let settings = bit.settings
                let pkg = bit.dir.pkg
                safeRemove(pkg)
                pkg.makeDir()

                /* These three files are replicated outside the top directory for easy access */
                install('doc/product/README.TXT', pkg, {fold: true, expand: true})
                install('package/install.sh', pkg.join('install'), {permissions: 0755, expand: true})
                install('package/uninstall.sh', pkg.join('uninstall'), {permissions: 0755, expand: true})

                let vname = settings.product + '-' + settings.version + '-' + settings.buildNumber
                pkg = bit.dir.pkg.join(vname)
                let prefixes = bit.prefixes;
                let p = {}
                for (prefix in bit.prefixes) {
                    p[prefix] = Path(pkg.name + bit.prefixes[prefix])
                    p[prefix].makeDir()
                }
                let strip = settings.profile == 'debug'

                install('LICENSE.md', p.product, {fold: true, expand: true})
                install('doc/product/README.TXT', p.product, {fold: true, expand: true})
                install('package/uninstall.sh', p.bin.join('uninstall'), {permissions: 0755, expand: true})
                install('package/linkup', p.bin, {permissions: 0755, expand: true})
                install(bit.dir.bin + '/*', p.bin, {
                    include: /appweb|appman|esp|http|auth|makerom|libappweb|libmpr/,
                    permissions: 0755, 
                })
                install(bit.dir.bin.join('appweb'), p.bin, {
                    permissions: 0755, 
                    strip: strip,
                })
                install(bit.dir.lib.join('*'), p.lib, {
                    permissions: 0755, 
                    exclude: /file-save|www|simple|sample/,
                })
                install('src/server/appweb.conf', p.config)
                install('src/server/mime.types', p.config)
                install('src/server/php.ini', p.config)
                install('src/server/web/**/*', p.web, {exclude: /mgmt/ })
                install('src/server/web/test/*', p.web.join('test'))
                install('src/server/web/test/*', p.web.join('test'), {
                    include: /.cgi|test.pl|test.py/,
                    permissions: 0755,
                })
                install(bit.dir.lib + '/*', p.lib, {
                    permissions: 0644, 
                    include: /esp.conf|esp-www/,
                })
                let user = getWebUser(), group = getWebUser()
                p.spool.join('cache').makeDir()
                let tmp = p.spool.join('cache/.dummy')
                tmp.write()
                tmp.setAttributes({permissions: 0755, uid: user, gid: group})
                tmp = p.log.join('error.log')
                tmp.write()
                tmp.setAttributes({permissions: 0755, uid: user, gid: group})

                if (settings.task != 'remove') {
                    if (bit.packs.ssl.enable && bit.platform.os == 'linux') {
                        install(bit.dir.lib.join(bit.ext.shobj + '.*'), p.lib, {strip: strip, permissions: 0755})
                        for each (f in p.lib.glob('*.so.*')) {
                            let withver = f.basename
                            let nover = withver.name.replace(/\.[0-9]*.*/, '.so')
                            lib.join(nover).remove()
                            //  MOB - withver.link(p.lib.join(nover))
                            Cmd.sh('ln -s ' + withver + ' ' + lib.join(nover)) 
                        }
                    }
                    if (bit.platform.os == 'win') {
                        Cmd(['setConfig', 
                            '--home', '.', 
                            '--documents', 'web', 
                            '--logs', 'logs', 
                            '--port', settings.http_port,
                            '--ssl', settings.ssl_port,
                            '--cache', 'cache', 
                            '--modules', 'bin', 
                            bit.dir.cfg.join('appweb.conf')])
                    } else {
                        Cmd(['setConfig', 
                            '--home', prefixes.config,
                            '--documents', prefixes.web,
                            '--logs', prefixes.log,
                            '--port', settings.http_port,
                            '--ssl', settings.ssl_port,
                            '--user', user,
                            '--group', group,
                            '--cache', prefixes.spool.join('cache'), 
                            '--modules', prefixes.lib,
                            bit.dir.cfg.join('appweb.conf')])
                    }
                    bit.dir.cfg.join('appweb.conf.bak').remove()
                }
                if (bit.packs.ejscript.enable) {
                    install(bit.dir.lib.join('ejs*.mod'), p.lib);
                }
                if (OS == 'macosx') {
                    let daemons = pkg.join('Library/LaunchDaemons')
                    daemons.makeDir()
                    cp('package/MACOSX/com.embedthis.appweb.plist', daemons, {permissions: 0644, expand: true})

                } else if (OS == 'linux') {
                    cp('package/LINUX/' + settings.product + '.init', 
                        pkg.join('etc/init.d', settings.product), 
                        {permissions: 0755, expand: true})
                    cp('package/LINUX/' + settings.product + '.upstart', 
                        pkg.join('init', settings.product).joinExt('conf'),
                        {permissions: 0644, expand: true})

                } else if (OS == 'win') {
                    cp('msvcrt.lib', bin, {from: bit.packs.compiler.parent.join('redist/x86/Microsoft.VC100.CRT')})
                    cp('removeFiles*', bin, {from: bit.dir.bin, permissions: 0755})
                    cp('setConf*', bin, {from: bit.dir.bin, permissions: 0755})
                }
                if (bit.platform.like == 'posix') {
                    cp('doc/man/*.1', p.product.join('man/man1'), {compress: true })
                    if (settings.task == 'Install') {
                        Cmd.sh([bin.join('linkup'), settings.task, options.root])
                    }
                } 
                package(['combo', 'flat', 'tar', 'native'])
            ",
        },

        packageSource: {
            depends: ['build'],
            action: "
                let s = bit.settings
                let pkg = bit.dir.pkg.join(s.product + '-' + s.version)
                safeRemove(pkg)
                pkg.makeDir()

                install('Makefile', pkg)
                install('*.md', pkg, {fold: true, expand: true})
                install('configure', pkg, {permissions: 0755})
                install('build/**', pkg.join('build'), {
                    permissions: 0755,
                    include: /Makefile|Makefile.top|configure\.|\.defaults|config\.|make\.|\.config/,
                })
if (false) {
                install('build/bin/*', pkg.join('build/bin'), {
                    permissions: 0755,
                    include: /getImports|getlib|makedep|priv|fakePriv|utest*|bld$|make.*Package.*|fakePriv|mkdmg|makeInstall|combo|makedep|cacheConfig|patchAppweb|patchFile/,
                    trace: true,
                })
                install('build/src/*', pkg.join('build/src'), {
                    include: /^Makefile$|\.c$|\.h$/,
                })
                install('build/components/*', pkg.join('build/components'))
                install('bits/*', pkg.join('bits'))
                install('package/*', pkg.join('package'), {
                    include: /Makefile|\.files|\.es/,
                })
                install('package/*', pkg.join('package'), {
                    include: /\.sh|makeInstall\.|linkup/,
                    permissions: 0755,
                })
                install('package/**/*', pkg.join('package'), {
                    include: /LINUX|MACOSX|WIN/,
                })
                install('src/*.c', pkg.join('src'))
                install('src/**', pkg.join('src'), {
                    exclude: /\\.log$|\\.lst$|ejs.zip|\\.stackdump$|\\/cache|huge.txt|\\.swp$/,
                })
                install('doc/*', pkg.join('doc'), {
                    exclude: /\\/xml\\/|\\/html\\/|Archive|\\.mod$|\\.so$|\\.dylib$|\\.o$/,
                })
                install('projects/*', pkg.join('projects'), {
                    exclude: /\\/Debug\\/|\\/Release\\/|\\.ncb|\\.mode1v3|\\.pbxuser/,
                })
                package(['src'])
}
            ",
        },
    },
})
