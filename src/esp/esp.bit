/*
    esp.bit -- Bit File for Embedded Server Pages
 */

Bit.load({
    targets: {
        libmod_esp: {
            type: 'lib',
            depends: [ 'libappweb', 'sqlite' ],
            sources: [ '*.c' ],
            headers: [ '*.h' ],
            exclude: /esp\.c/,
            packs: [ 'esp' ],
        },

        espcmd: {
            path: '${BIN}/esp${EXE}',
            type: 'exe',
            depends: [ 'libappweb', 'sqlite', 'libmod_esp' ],
            sources: [ '*.c' ]
            platforms: [ 'local' ],
            packs: 'esp',
        },

        'esp.conf': {
            type: 'file',
            files: [ 'esp.conf' ],
            packs: 'esp',
        },

        'esp.conf.server': {
            type: 'file',
            path: '../server/esp.conf',
            files: [ 'esp.conf' ],
            packs: 'esp',
        },

        'paks': {
            path: '${OUT}/paks/',
            files: [ '**' ],
            platforms: [ 'local' ],
            packs: 'esp',
            home: '${TOP}/src/esp/paks',
            'generate-capture': true
            build: `
                trace('Copy', bit.dir.out.join('paks'))
                for each (pak in Path('.').files('*')) {
                    let version = pak.join('package.json').readJSON().version || '0.0.0'
                    makeDir(OUT.join('paks', pak, version))
                    for each (path in pak.files('**')) {
                        let stem = path.components.slice(1).join(path.separator)
                        let dest = OUT.join('paks', pak, version, stem)
                        if (path.isDir) {
                            makeDir(dest)
                        } else {
                            copyFile(path, dest)
                        }
                    }
                }
                if (Cmd.locate('pak')) {
                    run('pak -f -q cache ' + Path('.').files().join(' ')) 
                }
            `
        },

        pakcss: {
            action: `
                strace('Run', 'recess -compile paks/esp-angular-mvc/templates/esp-angular-mvc/client/css/all.less')
                let result = Cmd.run('recess -compile paks/esp-angular-mvc/templates/esp-angular-mvc/client/css/all.less')
                Path('paks/esp-angular-mvc/templates/esp-angular-mvc/client/css/all.css').write(result)

                strace('Run', 'recess -compile paks/esp-html-mvc/templates/esp-html-mvc/client/css/all.less')
                let result = Cmd.run('recess -compile paks/esp-html-mvc/templates/esp-html-mvc/client/css/all.less')
                Path('paks/esp-html-mvc/templates/esp-html-mvc/client/css/all.css').write(result)
            `
        },

        'esp-configure': {
            scripts: {
                postconfig: "
                    if (bit.platform.os == 'vxworks') {
                        let evars = []
                        for (let [key,value] in bit.env) {
                            evars.push('EspEnv ' + key + ' \"' + value + '\"\n')
                        }
                        bit.dir.lib.join('esp-' + bit.platform.os + '.conf').write(evars.join())
                    }
                ",
            },
        },

        pakvers: {
            build: `
                if (Cmd.locate('pak')) {
                    if (bit.settings.version != Path('paks/esp-angular/package.json').readJSON().version) {
                        run('pak -dir paks/esp-angular edit version=${settings.version}')
                        run('pak -dir paks/esp-angular-mvc edit version=${settings.version}')
                        run('pak -dir paks/esp-server edit version=${settings.version}')
                        run('pak -dir paks/esp-html-mvc edit version=${settings.version}')
                        run('pak -dir paks/esp-legacy-mvc edit version=${settings.version}')
                    }
                }
            `
        }
    },
})
