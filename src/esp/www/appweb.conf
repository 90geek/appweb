#
#   appweb.conf -- Appweb configuration for ${NAME}
#   

ErrorLog                stderr
LogLevel                0
LogTrace                3 headers,request,response,time
LogTraceFilter          4096 "*" "gif,jpg,png,ico,css,ico"

Listen                  ${LISTEN}

DirectoryIndex          index.esp
PutMethod               on

# MOB - remove
# KeepAlive               on
# UploadDir               /tmp
# UploadAutoDelete        on

ClientCache             86400 html gif jpeg jpg png pdf ico js

SetConnector            netConnector
AddOutputFilter         rangeFilter
AddFilter               chunkFilter
AddInputFilter          uploadFilter
AddHandler              fileHandler html git jpeg jpg png pdf ico css js ""

<if ESP_MODULE>
    LoadModule espHandler mod_esp
    AddHandler espHandler *.esp
    include ${LIBDIR}/esp.conf
    EspDir cache cache
    EspKeepSource on
    EspShowErrors on
    EspUpdate on
    EspLifespan 3600

    #
    #   Define the application. This creates a URI route for "/" for an ESP application in the current directory.
    #   It also creates a set of RESTful routes suitable for a Model View Controller style application.
    #
    EspApp / . restful ${DATABASE}://${NAME}.${DATABASE}

    #   Load the application when compiled flat into a single module.
    #   Use this if you wish to compile flat (esp compile flat)
    #
    # EspLoad ${NAME} cache/app

    #
    #   Alternatively uncomment this section below to use a Route block instead of the EspApp directive above. 
    #   This provides more control over exactly how the application is defined and configured. Don't use both!
    #
    # <Route />
        #
        #   Descriptive name for the route
        #
        # RouteName app

        #
        #   Define the directories used for cache, controllers, layouts, static and views. 
        #   Use "mvc" to set all directory names to their Model-View-Controller defaults.
        #
        # EspDir mvc

        #
        #   Define the application database
        #
        #   EspDb ${DATABASE}://${NAME}.${DATABASE}

        #
        #   Set the default lifespan for cached HTML content. Use espCacheControl() to enable in a controller.
        #
        # EspLifespan 3600

        #
        #   Keep the compiled view source in the cache directory
        #
        # EspKeepSource on

        #
        #   Automatically recompile and reload modified controllers, views and esp web pages
        #
        # EspUpdate on

        #
        #   Show recompilation and internal errors in the browser
        #
        # EspShowErrors on

        #
        #   Reset the route table. This clears inherited ESP routes to start afresh.
        #
        # Reset routes

        #
        #   Define a route for the home page
        #
        # EspRoute home GET,POST,PUT ^/$ ${STATIC_DIR}/index.esp

        #
        #   Define a route for static content. The leading "%" means it is a pure regular expression and so "$1" can
        #   be used to extract the positional matching sub-expression.
        #
        # EspRoute static  GET %^/static/(.*) ${STATIC_DIR}/$1

        #
        #   Define a route for controller/actions
        #
        # EspRoute default GET,POST ^/{controller}(~/{action}~) ${controller}-${action} ${controller}.c
        
        #
        #   Define of restful routes for a resource (singleton)
        #
        # EspResource name ...
        
        #
        #   Define of restful routes for a group of resources (multiple)
        #
        # EspResourceGoup name ...
        
        #
        #   Define a set of routes. Possible arguments are "simple", "mvc" and restful". 
        #
        # EspRouteSet restful

        #
        #   Show the route table in the log
        #
        # LogRoutes

        #
        #   Ensure the espHandler is responsible for serving content on this route   
        #
        # AddHandler espHandler
    # </Route>
</if>

#
#   SSL definition
#
#	<if SSL_MODULE>
#	    LoadModule sslModule mod_ssl
#	    SSLCertificateFile "server.crt"
#	    SSLCertificateKeyFile "server.key.pem"
#	    Listen 443
#	    <VirtualHost *:443>
#	        DocumentRoot "web"
#	        SSLEngine on
#	    </VirtualHost>                                  
#	</if>

#
#   LogRoutes will display the routing table. The "full" option will display a detailed multi-line route table.
#
# LogRoutes full
# LogRoutes
