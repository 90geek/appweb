#
#   esp.conf -- Appweb configuration for Embedded Server Pages
#   

#   Commands can be hard coded or they can used tokens of the form ${TOKEN}. The supported tokens are:
#       ARCH            - Target cpu architecture (arm, mips, ppc, x86)
#       CC              - Compiler command path
#       DEBUG           - Compiler debug switches
#       GCC_ARCH        - Gcc architecture mtune|mcpu setting
#       INC             - Default include directory path
#       LIBPATH         - Library search path
#       LIBS            - Libraries to link with
#       MOD             - Output module filename
#       OS              - Target operating system (lower case)
#       PLATFORM        - Target platform system (os-arch)
#       SHOBJ           - Shared library extension including period
#       SRC             - Input source file name
#       VS              - Visual Studio install directory
#       WIND_BASE       - Windows
#       WIND_GNU_PATH   - Windows
#       WIND_HOME       - Windows
#       WIND_HOST_TYPE  - Windows
#       WIND_PLATFORM   - Windows
#       WINSDK          - Windows SDK install directory
#
#   The conditions in the <if Condition> directives can be either:
#       Operating systems: freebsd, linux, macosx, win, vxworks 
#       CPU architectures: arm, mips, ppc, sparc, x64, x86
#       Profiles: E.g. debug, release, ...
#       Platforms: E.g. vxworks-arm-debug, vxworks-pcc-release, linux-arm-debug

#
#   This is the default compilation command for Linux and Freebsd. Overridden below for some operating systems.
#
EspCompile ${CC} -shared ${DEBUG} -Wall -Wno-unused-result -DPIC -fPIC -I. -I${INC} -L${LIBPATH} -Wl,--enable-new-dtags -Wl,-rpath,$ORIGIN/ -Wl,-rpath,$ORIGIN/../lib ${LIBS} -o ${MOD}${SHOBJ} ${SRC}

<if macosx>
    #
    #   Requires a separate compile and link to get debug symbols. If debug is not required, use the one-step
    #   compile command below. Not sure if this is still true for clang.
    #
    # EspCompile ${CC} -c ${DEBUG} -Wall -DPIC -fPIC -arch ${GCC_ARCH} -I. -I${INC} ${SRC} -o ${OBJ}
    # EspLink ${CC} -dynamiclib ${DEBUG} -arch ${GCC_ARCH} -L${LIBPATH} -Wl,-rpath,@executable_path/../lib -Wl,-rpath,@executable_path/ -Wl,-rpath,@loader_path/ ${LIBS} -o ${MOD}${SHOBJ} ${OBJ} 
    # EspCompile ${CC} -dynamiclib ${DEBUG} -Wall -DPIC -fPIC -arch ${GCC_ARCH} -I. -I${INC} -L${LIBPATH} -Wl,-rpath,@executable_path/../lib -Wl,-rpath,@executable_path/ -Wl,-rpath,@loader_path/ ${LIBS} -o ${MOD}${SHOBJ} ${SRC} 
</if>

<if win>
    EspCompile "${CC}" -LD ${DEBUG} -D_REENTRANT -D_MT -nologo -GR- -W3 -MDd -I. -I"${INC}" -Fe"${MOD}${SHOBJ}" "${SRC}" ${LIBS} ws2_32.lib
    # Use these definitions if appweb is not invoked with the VS env vars (INCLUDE, LIB and PATH) appropriately defined
    EspEnv INCLUDE "${VS}\VC\INCLUDE;${WINSDK}\include"
    EspEnv LIB "${WINSDK}\LIB;${VS}\VC\lib"
    EspEnv PATH "${VS}\Common7\IDE;${VS}\VC\bin;${VS}\Common7\Tools;${VS}\SDK\v3.5\bin;${VS}\VC\VCPackages;${WINSDK}\bin"

    EspEnv LIB "${WINSDK}\LIB\x64;${VS}\VC\lib\amd64"
    EspEnv PATH "${VS}\Common7\IDE;${VS}\VC\amd64\bin;${VS}\Common7\Tools;${VS}\SDK\v3.5\bin;${VS}\VC\VCPackages;${WINSDK}\bin\x64"
    EspEnv TMP "${TMP}"
</if>

<if vxworks>
    #
    #   The esp-vxworks.conf file will be generated by 'bit configure'
    #   Alternately, comment out this include, and set WIND_BASE, WIND_HOME, WIND_PLATFORM, WIND_HOST_TYPE, WIND_GNU_PATH 
    #   and WIND_CCNAME in the environment.
    include ${LIBDIR}/esp-vxworks.conf
    EspCompile "${WIND_GNU_PATH}/${WIND_HOST_TYPE}/bin/${WIND_CCNAME}" ${DEBUG} -DVXWORKS -DRW_MULTI_THREAD -D_REENTRANT -D_GNU_TOOL -DCPU=${VXCPU} -Wall -fno-builtin -fno-defer-pop -fvolatile -mtune=${GCC_ARCH} "-I${WIND_BASE}/target/h" "-I${WIND_BASE}/target/h/wrn/coreip" -I${INC} -o ${MOD}${SHOBJ} ${SRC} 
</if>

<if cygwin>
    # This is unsupported. Cygwin is unreliable.
    EspCompile ${CC} -shared ${DEBUG} -Wall -Wno-unused-result -DPIC -fPIC -I. -I${INC} -L${LIBPATH} -Wl,-rpath,$ORIGIN/ -Wl,-rpath,$ORIGIN/../lib ${LIBS} -o ${MOD}${SHOBJ} ${SRC}
</if>

<if SCRIPT>
    #
    #   Use this style to run a script to compile. The script would look like:
    #
    #   #!/bin/bash
    #   for i in "$@" ; do
    #       arg="${i%=*}"
    #       value="${i##*=}"
    #       eval $arg=\"$value\"
    #   done
    #   ${CC} -c ${DEBUG} -Wall -DPIC -fPIC -arch ${GCC_ARCH} -I. -I${INC} ${SRC} 
    #   ${CC} -dynamiclib ${DEBUG} -L${LIBPATH} -Wl,-rpath,@executable_path/../lib -Wl,-rpath,@executable_path/ -Wl,-rpath,@loader_path/ ${LIBS} -o ${MOD}${SHOBJ} ${OBJ} 
    #   rm -f ${OBJ}
    #   exit 0
    #
    #   This line will invoke the 'script' and define the args
    #
    # EspCompile script DEBUG="${DEBUG}" ARCH="${ARCH}" INC="${INC}" LIB="${LIBPATH}" OBJ="${OBJ}" MOD="${MOD}" SRC="${SRC}" SHOBJ="${SHOBJ}"
</if>
