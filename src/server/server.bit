/*
    server.bit -- Bit File for appweb server
 */

Bit.load({
    targets: {
        genapp: {
            action: "run('esp --static --genlink slink.c --flat compile')",
            generate: "esp --static --genlink slink.c --flat compile",
        },

        /*
            Static library for esp applications. Always built but only contains code if static linking.
         */
        libapp: {
            type: 'lib',
            depends: [ 'esp', 'libmod_esp' ],
            sources: [ 'slink.c' ],
            scripts: {
                postblend: "
                    let slink = Path('slink.c')
                    if (!slink.exists) {
                        trace('Generate', 'slink.c')
                        slink.write('/* slink.c  -- Generated AppWeb Static Initialization */\n\n' +
                            '#include \"esp.h\"\n\nPUBLIC void appwebStaticInitialize() {}\n')
                    }
                    /* Dynamically compute the required sources for static linking */
                    let sources = bit.targets.libapp.sources
                    for each (file in slink.readString().match(/SOURCE [^ ]*/g)) {
                        sources.push(TARGET.home.join(file.replace(/SOURCE /mg, '')))
                    }
                ",
            },
        },

        appweb: {
            type: 'exe',
            depends: ['libappweb', 'libmod_esp', 'libmod_ssl', 'libmod_ejs', 'libmod_php', 'libmod_cgi', 'libapp'],
            sources: [ 'appweb.c' ],
            scripts: {
                postblend: "
                    let sources = bit.targets.appweb.sources
                    if (bit.settings.rom) {
                        sources.push(TARGET.home.join('romFiles.c'))
                    }
                ",
            }
        },

        appwebMonitor: {
            enable: bit.platform.like == 'windows',
            type: 'exe',
            rule: 'gui'
            depends: [ 'libappweb' ],
            sources: [ 'windows/appwebMonitor.c' ],
            headers: [ 'windows/*.h' ],
            libraries: [ 'shell32.lib' ],
            resources: [ 'windows/appwebMonitor.rc' ],
        },

        'appwebMonitor.ico': {
            enable: bit.platform.like == 'windows',
            type: 'file',
            files: [ 'windows/appwebMonitor.ico' ],
            build: "cp('windows/appwebMonitor.ico', ${BIN})",
            generate: 'cp windows/appwebMonitor.ico ${BIN}',
        },

        'server-cache': {
            path: 'cache',
            precious: true,
            build: "Path('cache').makeDir()",
            generate: "mkdir -p cache",
            'generate-nmake': "md cache",
        },

        run: {
            action: "
                trace('Run', 'From directory src/server')
                run('appweb -v', {noio: true})
            ",
        },

        rom: {
            action: "
                let files = [ '.' ]
                files += Path('web').files('**')
                files += Path('junk/static').files('**')
                files += Path('junk/db').files('*.mdb')
                files.push('appweb.conf')
                files.push('mob.conf')
                files.push('auth.conf')
                files.push('esp.conf')
                Path('romFiles.c').write(Cmd.run(['makerom', '--prefix', '/'] + files))
            ",
        },
    },
})
