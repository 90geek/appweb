#
#   appweb.conf -- Default Configuration for the Embedthis Appweb HTTP Server
#   
#   This configuration file controls the operation of the Appweb server. The 
#   order of configuration directives matters as this file is parsed only once.
#   You must put the server root and error log definitions first to ensure 
#   configuration errors are logged.
#

#
#   Define the logging configuration first so any errors are logged.
#   This is for errors and debug trace. This log file is for the whole
#   server including virtual hosts. 
#
ErrorLog "error.log" size=10MB, level=2, backup=5, append, anew

#
#   Control the tracing of request and response requests to the error log.
#   This directive defines the levels at which various events are logged.
#
#   Log  rx conn=5, first=2, headers=3, body=5, limits=5, size=10K
#   Log tx first=3, headers=3, body=5, limits=5, time=6, size=10K, exclude="jpg,gif,png,ico,css,js"

#
#   Configure the access log.
#
#   AccessLog "access.log" size=10MB, backup=5, append, anew

#
#   Server current directory for Appweb to find necessary files and libraries. 
#   Appweb will change directory to this location when it runs.
#
ServerRoot "/etc/appweb"

#
#   Create a "chroot jail" by changing the system root directory to this directory. 
#   Once changed files outside the jail will be inaccessible.
#   If rotating log files, must do Chroot before ErrorLog or AccessLog
#
#   Chroot "."

#
#   Bind Appweb to listen for incoming requests on this address. Formats 
#   include (IP, IP:PORT, PORT). If an IP address is omitted, Appweb will 
#   listen on all interfaces. If a port is omitted, then port 80 is used.
#   Use [::]:port for IPv6 to bind to all addresses. [::1] is the IPv6 loopback.
#
Listen 80

#
#   Name of the server to use for redirects and error responses to clients. 
#   Uncomment this line and replace it with the public name of your server. 
#   This host name and port do not get used for listening on sockets. If 
#   unspecified, Appweb will use the IP address for the host name.
#
#   ServerName http://example.com

#
#   Location for documents for the primary server host. Routes and virtual
#   hosts may define their own document root.
#
DocumentRoot "/var/www/appweb-default"

#
#   Default directory index to serve when a directory is requested.
#
DirectoryIndex index.html

#
#   Location of the mime translation file to map content types to file 
#   extensions. For other types, you can use AddType.  
#   "AddType application/x-appweb-other other"
#
TypesConfig mime.types

#
#   Search path for dynamically loadable modules. If modules have been 
#   statically linked into Appweb, this directive and LoadModule directives
#   will be ignored. This directive must be before any LoadModule directives.
#
#   LoadModulePath "/usr/lib/appweb/lib"

#
#   Notes on the request processing pipeline. The pipeline consists of a set 
#   of stages comprised of a handler, possible filters and one network 
#   connector. 
#
#   The request processing pipeline can be configured at various levels: 
#   globally, virtual hosts and location blocks. At each level, a set of 
#   processing stages can be defined. Inner levels inherit the pipeline from 
#   the outer levels. The pipeline can be reset at a level by using 
#   ResetPipeline. Each stage may be defined for all requests or only for a 
#   specific file extension or location path prefix.
#
#   If you use the AddConnector, AddFilter or AddHandler directives, the 
#   stage is defined for both input and output processing. For filters you can
#   use AddInputFilter AddOutputFilter directives to define for a single 
#   direction.
#
#   Multiple handlers can be defined, but only the first matching handler will
#   be activated when a request is processed.
#
SetConnector netConnector
AddOutputFilter rangeFilter
AddOutputFilter chunkFilter

#
#   Enable the uploadFilter if you want Appweb to transparently accept upload
#   data. Handlers receive form variables that refer to the uploaded file. 
#   Most PHP apps require the uploadFilter to be disabled.
#
#   AddInputFilter uploadFilter
#   UploadDir /tmp
#   UploadAutoDelete on

#
#   Select the fileHandler for static files and as a catch-all when all other handlers fail.
#
AddHandler fileHandler html gif jpeg jpg png pdf ico css js  ""

#
#   For CGI scripts, such as your Perl scripts make sure that you have 
#   "#!/PerlPath" as the first line. This works on Windows as well.
#   The .bat and .cmd extensions are really only for Windows.
#   
<if CGI_MODULE>
    LoadModule cgiHandler mod_cgi
    AddHandler cgiHandler exe cgi cgi-nph out bat cmd pl py

    ScriptAlias /cgi-bin/ "$DOCUMENT_ROOT/../cgi-bin"

    #
    #   These actions specify the program to run for each Perl or Python 
    #   script. They map to the extensions specified in the mime.types for for 
    #   these mime types. Alternatively, you may use put all your scripts in 
    #   the subdirectories specified by the releavant Route blocks below.
    #   For perl and python, you can also put "#!/path/to/program" as the first 
    #   line. This works on Windows as well. The .bat and .cmd extensions are 
    #   really only for Windows. For Windows, update the program paths with
    #   the right paths.
    #   
    Action application/x-appweb-perl /usr/bin/perl
    Action application/x-appweb-python /usr/bin/python
    Action application/x-appweb-lua /usr/bin/lua
    Action application/x-appweb-ruby /usr/bin/ruby
</if>

#
#   Directory listings
#
<if DIR_MODULE>
    Options Indexes
    IndexOrder ascending name
    IndexOptions FancyIndexing FoldersFirst
</if>

<if EJS_MODULE>
    LoadModule ejsHandler mod_ejs
    AddHandler ejsHandler ejs es

    #
    #   Define the ejs startup script
    #
    #   EjsStartup start.es

    #
    #   Define the default number of workers (threads) to use for ejs requests
    #   Defaults to ThreadLimit
    #
    # EjsWorkers 10

    #
    #   Define an ejs application. Args are:  Prefix Directory Script Workers
    #
    EjsAlias /farm /users/dev/git/farm start.es 10

    #
    #   Define an ejs application using a location block instead of EjsAlias
    #
	#    <Route /myfarm>
	#        EjsStartup start.es
	#        EjsWorkers 10
    #   MOB - review
	#        Alias /myfarm /Users/dev/git/farm
	#        AddHandler fileHandler html gif jpeg jpg png pdf ico css js ""
	#        AddHandler ejsHandler
	#    </Route>

    #
    #   Define an ejs application using a virtual host
    #
	#    <VirtualHost *:4001>
	#        DocumentRoot "."
	#        AddHandler   fileHandler html gif jpeg jpg png pdf ico css js
	#        AddHandler   ejsHandler
	#        EjsStartup   farm
	#    </VirtualHost>
</if>

<if ESP_MODULE>
    LoadModule espHandler mod_esp
    AddHandler espHandler esp

    #
    #   Store compiled content in the "cache" directory
    #
    EspDir cache /var/spool/appweb/cache

    #
    #   Update modified source by automatically recompiling
    #
    EspUpdate on

    #
    #   Send server errors back to the client
    #
    EspShowErrors on

    #
    #   Keep intermediate source code in the cache directory
    #
    EspKeepSource on

    #
    #   Include esp compilation rules
    #
    include ${LIBDIR}/esp.conf

    #
    #   Route requests from /appName/ to the ESP application under directory. Set routePackage to "simple", "mvc" or
    #   "restful". Set database to provider://database. E.g. EspApp app . restful mdb://app.mdb
    #
    # EspApp appName directory routePackage database

    #
    #   Define a route for the home page
    #
    # EspRoute home GET,POST,PUT ^/$ ${STATIC_DIR}/index.esp

    #
    #   Define a route for static content. The leading "%" means it is a pure regular expression and so "$1" can
    #   be used to extract the positional matching sub-expression.
    #
    # EspRoute static GET %^/static/(.*) ${STATIC_DIR}/$1

    #
    #   Define a route for controller/actions
    #
    # EspRoute default GET,POST ^/{controller}(~/{action}~) ${controller}-${action} ${controller}.c
    
    #
    #   Define of restful routes for a resource (singleton)
    #   Use LogRoutes to see the routes added.
    #
    # EspResource name ...
    
    #
    #   Define of restful routes for a group of resources (multiple)
    #   Use LogRoutes to see the routes added.
    #
    # EspResourceGoup name ...
    
    #
    #   Define a set of routes. Possible arguments are "simple", "mvc" and restful". 
    #   Use LogRoutes to see the routes added.
    #
    # EspRouteSet restful

    #
    #   Show the route table in the log
    #
    # LogRoutes

</if>

<if PHP_MODULE>
    LoadModule phpHandler mod_php
    AddHandler phpHandler php
</if>

#
#   The file handler supports requests for static files. 
#
# PutMethod on
TraceMethod off

#
#   Set a default response cache lifespan
#
Cache 1day 

#
#   Session state duration.
#
SessionTimeout 30mins

#
#   Maximum request duration.
#
RequestTimeout 10mins

#
#   Maximum request and connection inactivity duration
#
InactivityTimeout 1min

#
#   Maximum number of threads if built multi-threaded. Set to 0 for single-threaded
#   
#
ThreadLimit 10

#
#   Pre-start and always preserve this number of threads
#
#   StartThreads 4

#
#   Memory allocation error policy. This defines what Appweb will do if the memory
#   limit defined by LimitMemory is exceeded. Choose from "prune" to prun non-critical
#   response cache and session state, but continue on. This make the memory limit a soft
#   limit. Or select "restart" to do a graceful shutdown and then restart anew. Or "exit"
#   to immediately exit the application.
#
MemoryPolicy restart

#
#   Maximum application memory. Invokes MemoryDepletionPolicy if exceeded. Redline at 95%.
#
LimitMemory 100MB

#
#
#   Maximum cache size for response caching and sessions
#
LimitCache 10MB

#
#   Maximum item that can be cached
#
LimitCacheItem 200K

#
#   Maximum number of simultaneous client systems. Set to zero for unlimited.
#
LimitClients 40

#
#   Maximum number of simultaneous requests. Set to zero for unlimited.
#
LimitRequests 80

#
#   Number of HTTP requests to accept on a single TCP/IP connection
#   Reduce this number to minimize the chance of DoS attacks.
#
LimitKeepAlive 200

#   Maximum size of the request form body
#  
LimitRequestBody 1MB

#
#   Maximum size of the request content body
#  
LimitRequestBody 20MB

#
#   Maximum size of request header
#  
LimitRequestHeader 1MB

#
#   Maximum number of request header lines 
#  
LimitRequestHeaderLines 512

#
#   Maximum size of the maximum response body
#  
LimitResponseBody 2GB

#
#   Maximum buffer size for pipeline stages
#
LimitStageBuffer 64K

#
#   Maximum response chunk size
#
LimitChunk 64K

#
#   Maximum uploaded file size
#
LimitUpload 2GB

#
#   Maximum request URI size
#
LimitUri 32K

#
#   WARNING: Change this very carefully. Typically operating systems with virtual memory can
#   effectively allocate the stack size. Systems with non-virtual memory may need to define this.
#   ThreadStack 64K

#
#   The user name and group to switch to once Appweb has started.
#   NOTE: If you wish to backup log files, you must have write permission to the log file directory.
#
Group nogroup
User nobody

#
#   Cache static content at the client
#   This sets an cache expiry period (secs) for content. Clients will refresh only if
#   content is stale in their local cache. This defines a set of file extensions 
#   for which Expires/Cache-Control headers will be generated.
#
#   Cache client=1day extensions="html,gif,jpeg,jpg,png,pdf,ico,js"

#
#   Cache specific URIs at the server with a lifespan of one hour
#   All requests with the same URI path, regardless of request params are cached as one.
#
#   Cache server=1hour all /cache.esp /cache.php /cache.ejs /cache.cgi

#
#   Other useful Directives
#
#   ErrorDocument 404 /notFound.html
#
#   Redirect temp /pressRelease.html /fixedPressRelease.html
#   Redirect 410 /membersOnly 
#   AddLanguage en english
#   AddLanguageRoot en englishContentDir
#   DefaultLanguage fr
#

#
#   Authorization directives for basic or digest authentication. You can
#   add these here to apply to the entire server or put inside a VirutalHost 
#   or Route block. If defined at multiple levels, the inner most level wins. example:
#
#       AuthMethod file 
#       AuthGroupFile groups.db
#       AuthUserFile users.db
#       AuthDigestQop auth
#
#       <Route $DOCUMENT_ROOT/basic/acme>
#           AuthType basic
#           AuthName "Acme Inc"
#           Require valid-user
#       </Route>
#
#       <Route $DOCUMENT_ROOT/digest/acme>
#           AuthType digest
#           AuthName "Acme Inc"
#           Require valid-user
#       </Route>
#

<if SSL_MODULE>
    Listen 443

    LoadModule sslModule mod_ssl

    #
    #   This virtual host will process SSL requests. Inherits the default server 
    #   configuration.
    #
    <VirtualHost *:443>
        DocumentRoot "/var/www/appweb-default"
        SSLEngine on
        # SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
        # SSLCipherSuite HIGH:MEDIUM
        # Use an RC4-SHA cipher to mitigate the BEAST attack
        SSLCipherSuite HIGH:RC4+SHA
        SSLProtocol ALL -SSLV2

        #
        #   WARNING: you must regenerate the server.crt and server.key.pem
        #
        SSLCertificateFile "ssl/server.crt"

        #
        #   WARNING: we are using the decrypted key here so it won't prompt 
        #   for the password. Replace with server.key for higher security.
        #
        SSLCertificateKeyFile "ssl/server.key.pem"

        #
        # Add these directives to require and verify client certificates
        #
        # SSLVerifyClient require
        # SSLCACertificateFile "ssl/ca.crt"
        # SSLCACertificatePath "ssl/certs"

    </VirtualHost>
</if>

#
#   Alias for appweb documentation
#   
Alias /doc/ "/usr/share/doc/appweb/"

#
#   Include per-app configuration
#
Include apps/*.conf
