#
#   appweb.conf -- Default Configuration for the Embedthis Appweb HTTP Server
#   
#   This configuration file controls the operation of the Appweb server. The 
#   order of configuration directives matters as this file is parsed only once.
#   You must put the server root and error log definitions first to ensure 
#   configuration errors are logged.
#

#
#   Define the logging configuration first so any errors are logged
#   Log all Appweb errors and trace to this file. This is the error 
#   file for the whole server including all virtual hosts. 
#
ErrorLog "/var/log/appweb/error.log"

#
#   The log level can be a number between 0 and 9 (most verbose level).
#
LogLevel 1

#
#   Enable the tracing of request and response requests.
#   The LogTrace directive defines a level at which to log requests and describes 
#   whether to trace requests, responses and/or headers and content body data.
#   The default is to log headers and response headers only at level 3
#
#   LogTrace 2 headers,body,request,response,time

#   The LogTraceFilter defines a maximum size to log for a file and an optional 
#   inclusion and exclusion pattern. File extensions matching the inclusion (first) 
#   pattern are traced. File extensions matching the exclusion (second) pattern are 
#   excluded.
#
#   LogTraceFilter 4096 "*" "gif,jpg,png,ico"

#
#   Define the log format for the access log.
#
#   CustomLog "/var/log/appweb/access.log" "%h %l %u %t \"%r\" %>s %b"

#
#   Server current directory for Appweb to find necessary files and libraries. 
#   Appweb will change directory to this location when it runs.
#
ServerRoot "/etc/appweb"

#
#   Create a "chroot jail" by changing the system root directory to this directory. 
#   Once changed files outside the jail will be inaccessible.
#
#   Chroot "."

#
#   Bind Appweb to listen for incoming requests on this address. Formats 
#   include (IP, IP:PORT, PORT). If an IP address is omitted, Appweb will 
#   listen on all interfaces. If a port is omitted, then port 80 is used.
#   Use [::]:port for IPv6 to bind to all addresses. [::1] is the IPv6 loopback.
#
Listen 7777

#
#   Name of the server to use for redirects and error responses to clients. 
#   Uncomment this line and replace it with the public name of your server. 
#   This host name and port do not get used for listening on sockets. If 
#   unspecified, Appweb will use the IP address for the host name.
#
#   ServerName http://localhost:9997

#
#   Location for documents for the primary server host. Virtual hosts 
#   may define their own DocumentRoot directives.
#
DocumentRoot "/var/www/appweb-default"

#
#   Default directory index to serve when a directory is requested.
#
DirectoryIndex index.html

#
#   Location of the mime translation file to map content types to file 
#   extensions. For other types, you can use AddType.  
#   "AddType application/x-appweb-other other"
#
TypesConfig mime.types

#
#   Search path for dynamically loadable modules. If modules have been 
#   statically linked into Appweb, this directive and LoadModule directives
#   will be ignored. This directive must be before any LoadModule directives.
#
#   LoadModulePath "/usr/lib/appweb/lib"

#
#   Notes on the request processing pipeline. The pipeline consists of a set 
#   of stages comprised of a handler, possible filters and one network 
#   connector. 
#
#   The request processing pipeline can be configured at various levels: 
#   globally, virtual hosts and location blocks. At each level, a set of 
#   processing stages can be defined. Inner levels inherit the pipeline from 
#   the outer levels. The pipeline can be reset at a level by using 
#   ResetPipeline. Each stage may be defined for all requests or only for a 
#   specific file extension or location path prefix.
#
#   If you use the AddConnector, AddFilter or AddHandler directives, the 
#   stage is defined for both input and output processing. For filters you can
#   use AddInputFilter AddOutputFilter directives to define for a single 
#   direction.
#
#   Multiple handlers can be defined, but only the first matching handler will
#   be activated when a request is processed.
#
SetConnector netConnector
AddOutputFilter rangeFilter
AddOutputFilter chunkFilter
AddInputFilter uploadFilter
AddHandler fileHandler html gif jpeg jpg png pdf ico css js  ""

#
#   For CGI scripts, such as your Perl scripts make sure that you have 
#   "#!/PerlPath" as the first line. This works on Windows as well.
#   The .bat and .cmd extensions are really only for Windows.
#   
<if CGI_MODULE>
    LoadModule cgiHandler mod_cgi
    AddHandler cgiHandler exe cgi cgi-nph out bat cmd pl py

    ScriptAlias /cgi-bin/ "$DOCUMENT_ROOT/../cgi-bin"

    #
    #   These actions specify the program to run for each Perl or Python 
    #   script. They map to the extensions specified in the mime.types for for 
    #   these mime types. Alternatively, you may use put all your scripts in 
    #   the subdirectories specified by the releavant Route blocks below.
    #   For perl and python, you can also put "#!/path/to/program" as the first 
    #   line. This works on Windows as well. The .bat and .cmd extensions are 
    #   really only for Windows. For Windows, update the program paths with
    #   the right paths.
    #   
    Action application/x-appweb-perl /usr/bin/perl
    Action application/x-appweb-python /usr/bin/python
    Action application/x-appweb-lua /usr/bin/lua
    Action application/x-appweb-ruby /usr/bin/ruby
</if>

#
#   Directory listings
#
<if DIR_MODULE>
    Options Indexes
    IndexOrder ascending name
    IndexOptions FancyIndexing FoldersFirst
</if>

<if EJS_MODULE>
    LoadModule ejsHandler mod_ejs
    AddHandler ejsHandler ejs es

    #
    #   Define the ejs startup script
    #
    #   EjsStartup start.es

    #
    #   Define the default number of workers (threads) to use for ejs requests
    #
    # EjsWorkers 10

    #
    #   Define an ejs application. Args are:  Prefix Directory Script Workers
    #
    EjsAlias /farm /users/dev/git/farm start.es 10

    #
    #   Define an ejs application using a location block instead of EjsAlias
    #
	#    <Route /myfarm>
	#        EjsStartup      start.es
	#        EjsWorkers      10
    #   MOB - review
	#        Alias /myfarm   /Users/dev/git/farm
	#        AddHandler      fileHandler html gif jpeg jpg png pdf ico css js ""
	#        AddHandler      ejsHandler
	#    </Route>

    #
    #   Define an ejs application using a virtual host
    #
	#    <VirtualHost *:4001>
	#        DocumentRoot    "."
	#        AddHandler      fileHandler html gif jpeg jpg png pdf ico css js
	#        AddHandler      ejsHandler
	#        EjsStartup      farm
	#    </VirtualHost>
</if>

<if ESP_MODULE>
    LoadModule espHandler mod_esp
    AddHandler espHandler esp
    #
    #   Store compiled content in the "cache" directory
    #
    EspDir cache cache

    #
    #   Update modified source by automatically recompiling
    #
    EspUpdate on

    #
    #   Send server errors back to the client
    #
    EspShowErrors on

    #
    #   Keep intermediate source code in the cache directory
    #
    EspKeepSource on

    #
    #   Default lifespan for cached response content. Use espCacheControl() to enable in a controller.
    #
    EspLifespan 3600

    #
    #   Include esp compilation rules
    #
    include ${LIBDIR}/esp.conf

    #
    #   Route requests from /appName/ to the ESP application under directory. Set routePackage to "simple", "mvc" or
    #   "restful". Set database to provider://database. E.g. EspApp app . restful mdb://app.mdb
    #
    # EspApp appName directory routePackage database

    #
    #   Define a route for the home page
    #
    # EspRoute home GET,POST,PUT ^/$ ${STATIC_DIR}/index.esp

    #
    #   Define a route for static content. The leading "%" means it is a pure regular expression and so "$1" can
    #   be used to extract the positional matching sub-expression.
    #
    # EspRoute static  GET %^/static/(.*) ${STATIC_DIR}/$1

    #
    #   Define a route for controller/actions
    #
    # EspRoute default GET,POST ^/{controller}(~/{action}~) ${controller}-${action} ${controller}.c
    
    #
    #   Define of restful routes for a resource (singleton)
    #   Use LogRoutes to see the routes added.
    #
    # EspResource name ...
    
    #
    #   Define of restful routes for a group of resources (multiple)
    #   Use LogRoutes to see the routes added.
    #
    # EspResourceGoup name ...
    
    #
    #   Define a set of routes. Possible arguments are "simple", "mvc" and restful". 
    #   Use LogRoutes to see the routes added.
    #
    # EspRouteSet restful

    #
    #   Show the route table in the log
    #
    # LogRoutes

</if>

<if PHP_MODULE>
    LoadModule phpHandler mod_php
    AddHandler phpHandler php
</if>

UploadDir /tmp
UploadAutoDelete on
AddInputFilter uploadFilter

#
#   The file handler supports requests for static files. 
#
# PutMethod on
TraceMethod off

#
#   Set an cache expiry period (secs) for content. Clients will refresh only if
#   content is stale in their local cache. This defines a set of file extensions 
#   for which Expires/Cache-Control headers will be generated.
#
ClientCache 86400 html gif jpeg jpg png pdf ico js

#
#   Send and receive inactivity timeout to close an idle TCP/IP connection
#
Timeout 60

#
#   Define persistent connections where one TCP/IP connection may serve
#   multiple HTTP requests. (A definite performance boost)
#
KeepAlive on

#
#   Number of seconds to wait for the next HTTP request before closing 
#   the TCP/IP connection.
#
KeepAliveTimeout 60

#
#   Number of HTTP requests to accept on a single TCP/IP connection
#   Reduce this number to minimize the chance of DoS attacks.
#
MaxKeepAliveRequests 200

#
#   Maximum number of threads if built multi-threaded. Set to 0 for single-threaded
#   
#
ThreadLimit 10

#
#   Pre-start and always preserve this number of threads
#
#   StartThreads 4

#
#   Memory allocation error policy. If LimitMemoryMax is exceeded, what should the app do.
#   [exit|restart]
#
MemoryDepletionPolicy restart      

#
#   Maximum number of simultaneous clients. This is not the number of client sessions.
#
LimitClients 40

#
#   Maximum application memory (1GB). Invokes MemoryDepletionPolicy if exceeded.
#
LimitMemoryMax       1000000000

#
#   Maximum application memory redline (800MB). Invokes memory allocation handler if exceeded.
#
LimitMemoryRedline   0800000000

#
#   Size of the maximum request form body (1 MB)
#  
LimitRequestBody 1048576

#
#   Size of the maximum request content body (20 MB)
#  
LimitRequestBody 20971520

#
#   Maximum number of request header fields 
#  
LimitRequestFields 512  

#
#   Maximum size of request header fields 
#  
LimitRequestFieldSize 1048576

#
#   Maximum size of the maximum response body (bytes)
#  
LimitResponseBody 104857600

#
#   Maximum buffer size for pipeline stages
#
LimitStageBuffer 65536

#
#   Maximum response chunk size
#
LimitChunkSize 32768

#
#   Maximum uploaded file size (20 MB)
#
LimitUploadSize 20971520

#
#   Maximum URL size
#
LimitUrl 30000

#
#   Other tunable parameters
#
#   ThreadStackSize 65536

#
#   The user name and group to switch to once Appweb has started.
#
Group nogroup
User nobody

#
#   Other useful Directives
#
#   ErrorDocument 404 /notFound.html
#
#   Redirect temp /pressRelease.html /fixedPressRelease.html
#   Redirect 410 /membersOnly 
#   AddLanguage en english
#   AddLanguageRoot en englishContentDir
#   DefaultLanguage fr
#

#
#   Authorization directives for basic or digest authentication. You can
#   add these here to apply to the entire server or put inside a VirutalHost 
#   or Route block. If defined at multiple levels, the inner most level wins. example:
#
#       AuthMethod file 
#       AuthGroupFile groups.db
#       AuthUserFile users.db
#       AuthDigestQop auth
#
#       <Route $DOCUMENT_ROOT/basic/acme>
#           AuthType basic
#           AuthName "Acme Inc"
#           Require valid-user
#       </Route>
#
#       <Route $DOCUMENT_ROOT/digest/acme>
#           AuthType digest
#           AuthName "Acme Inc"
#           Require valid-user
#       </Route>
#

<if SSL_MODULE>
    #
    #   List on port 4443 for SSL requests. NOTE: Standard SSL port is 443.
    #
    Listen 4443

    LoadModule sslModule mod_ssl

    #
    #   This virtual host will process SSL requests. Inherits the default server 
    #   configuration.
    #
    <VirtualHost *:4443>
        DocumentRoot "/var/www/appweb-default"
        SSLEngine on
        # SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
        # SSLCipherSuite HIGH:MEDIUM
        # Use an RC4-SHA cipher to mitigate the BEAST attack
        SSLCipherSuite HIGH:RC4+SHA
        SSLProtocol ALL -SSLV2

        #
        #   WARNING: you must regenerate the server.crt and server.key.pem
        #
        SSLCertificateFile "ssl/server.crt"

        #
        #   WARNING: we are using the decrypted key here so it won't prompt 
        #   for the password. Replace with server.key for higher security.
        #
        SSLCertificateKeyFile "ssl/server.key.pem"

        #
        # Add these directives to require and verify client certificates
        #
        # SSLVerifyClient require
        # SSLCACertificateFile "ssl/ca.crt"
        # SSLCACertificatePath "ssl/certs"

    </VirtualHost>                                  
</if>

#
#   Alias for appweb documentation
#   
Alias /doc/ "/usr/share/doc/appweb/"

#
#   Include per-app configuration
#
Include conf/apps/*.conf
