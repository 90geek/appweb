#
#   appweb.conf -- Appweb configuration for ${NAME}
#   

ErrorLog                stderr
LogLevel                0
LogTrace                3 headers,request,response,time
LogTraceFilter          4096 "*" "gif,jpg,png,ico,css,ico"

Listen                  ${LISTEN}

DirectoryIndex          index.esp
PutMethod               on
KeepAlive               on
UploadDir               /tmp
UploadAutoDelete        on

ClientCache             86400 html gif jpeg jpg png pdf ico js

SetConnector            netConnector
AddOutputFilter         rangeFilter
AddFilter               chunkFilter
AddInputFilter          uploadFilter
AddHandler              fileHandler html git jpeg jpg png pdf ico css js

<if ESP_MODULE>
    LoadModule espHandler mod_esp
    AddHandler espHandler *.esp
    include ${LIBDIR}/esp.conf
    EspDir cache cache
    EspKeepSource on
    EspShowErrors on
    EspUpdate on
    EspLifespan 3600
    EspRoute esp ALL %\.[eE][sS][pP]$

    #
    #   Use the EspAlias to define an application. This creates a URI location for "/" and uses the ESP application
    #   located at ".".  This defines a location, routes, and configures the espHandler to serve requests to this 
    #   URI location.
    #
    EspAlias / . mvc

    #
    #   Alternatively uncomment this to use a location definition instead of the EspAlias above. This provides more
    #   control over exactly how the application is defined and configured.
    #
    # <Location />
        #
        #   Load an application that has been compiled flat. This means all the application is compiled into a single
        #   module using "esp compile flat".
        #
        # EspLoad app app/cache/app

        #
        #   Set the default lifespan for cached HTML content. Use espCacheControl() to enable in a controller.
        #
        # EspLifespan 3600

        #
        #   Keep the compiled view source in the cache directory
        #
        # EspKeepSource on

        #
        #   Automatically recompile and reload modified controllers, views and esp web pages
        #
        # EspUpdate on

        #
        #   Show recompilation and internal errors in the browser
        #
        # EspShowErrors on

        #
        #   Reset the route table. This clears inherited ESP routes to start afresh.
        #
        # EspReset routes

        #
        #   Define the directory used for views. Can also use EspDir for: cache, controllers, layouts, static
        #   Use "mvc" to set all directory names to their Model-View-Controller defaults.
        #
        # EspDir views views

        #
        #   Define a route for the home page
        #
        # EspRouteLine home    GET,POST,PUT     ^/$                         ${STATIC_DIR}/index.esp

        #
        #   Define a route for static content. The leading "%" means it is a pure regular expression and so "$1" can
        #   be used to extract the positional matching sub-expression.
        #
        # EspRouteLine static  GET              %^/static/(.*)              ${STATIC_DIR}/$1

        #
        #   Define a route for controller/actions
        #
        # EspRouteLine default GET,POST         ^/{controller}(/{action})   ${controller}-${action} ${controller}.c
        
        #
        #   Define a route for "*.esp" pages
        #
        # EspRouteLine esp GET,POST,PUT,DELETE  \.[eE][sS][pP]$

        #
        #   Alternatively, instead of defining routes one-by-one, you can enable a set of "RESTful" routes.
        #   This can be used without args, or can be used as: "EspRestfulRoutes /URI-prefix controllerName".
        #       EspRouteLine init GET       ^/{controller}/init       ${controller}-init      ${controller}.c
        #       EspRouteLine index GET      ^/{controller}(/)$        ${controller}-index     ${controller}.c
        #       EspRouteLine create POST    ^/{controller}(/)         ${controller}-create    ${controller}.c
        #       EspRouteLine edit GET       ^/{controller}/{id}/edit  ${controller}-edit      ${controller}.c
        #       EspRouteLine show GET       ^/{controller}/{id}       ${controller}-show      ${controller}.c
        #       EspRouteLine update PUT     ^/{controller}/{id}       ${controller}-update    ${controller}.c
        #       EspRouteLine destroy DELETE ^/{controller}/{id}       ${controller}-destroy   ${controller}.c
        #       EspRouteLine default ALL    ^/{controller}(/{action}) ${controller}-${action} ${controller}.c
        #
        # EspRestfulRoutes

        #
        #   The EspRoute directive allows more control over request matching. 
        #
        # <EspRoute "test">
            # EspUri          ^/(XX|YY)/{controller}(/{action})
            # EspHeader       User-Agent ! Mozilla
            # EspField        name john
            # EspMethods      GET,POST
            # EspAction       ${controller}-${action}/${header:User-Agent}/${field:name}
            # EspController   ${controller}.c
        # </EspRoute>

        #
        #   Show the route table in the log
        #
        # EspLogRoutes

        #
        #   Ensure the espHandler is responsible for serving content on this route   
        #
        # AddHandler espHandler
    # </Location>
</if>

#
#   SSL definition
#
#	<if SSL_MODULE>
#	    LoadModule sslModule mod_ssl
#	    SSLCertificateFile "server.crt"
#	    SSLCertificateKeyFile "server.key.pem"
#	    Listen 443
#	    <VirtualHost *:443>
#	        DocumentRoot "web"
#	        SSLEngine on
#	    </VirtualHost>                                  
#	</if>

AddHandler fileHandler ""
