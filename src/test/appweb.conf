#
#   appweb.conf -- Appweb unit testing configuration
#   

# ErrorLog              log/error.log rotate,limit=10K,level=2
# AccessLog             conf/log.conf append,rotate,limit=10K
# TraceRx               conn=5, first=2, headers=3, body=5, time=4, size=10240, filter="jpg,gif,png,ico,css,js"
# TraceTx               first=3, headers=3, body=5, size=10240, filter="jpg,gif,png,ico,css,js"
# TraceRx               conn:5, first:2, headers:3, body:5, time:4, size:10240, filter:"jpg,gif,png,ico,css,js"

#
#   - Use same rotate code for error log and access log
#   - Rotate policy
#       - rotate when size reaches certain level
#       - append ".N" to old files
#       - rename all 5 when size reaches limit. 
#   - Remove LogRotation
#   - Add access log
#   - Deprecate from doc CustomLog, LogLevel, LogTrace, LogTraceFilter
#   - Add time tracing

ErrorLog                stdout
# LogRotation           5 1

LogLevel                0
LogTrace                3 headers,request,response,time
LogTraceFilter          4096 "*" "gif,jpg,png,ico,css,ico"

# Listen                [::]:5100
Listen                  4100         # MAIN - dont remove comment
DocumentRoot            "web"

LoadModulePath          "../../out/bin:../../out/lib"

DirectoryIndex          index.html
PutMethod               on
TraceMethod             off
KeepAlive               on

ClientCache             86400 html gif jpeg jpg png pdf ico js
Timeout                 600
KeepAliveTimeout        30
MaxKeepAliveRequests    200
ThreadLimit             8
LimitClients            40
LimitStageBuffer        65536
LimitChunkSize          32768

LimitUrl                1000000
LimitRequestHeaderCount 10000 
LimitRequestHeaderSize  10000000

LimitRequestBody        20000000000
LimitUploadSize         20000000000
LimitResponseBody       20000000000
LimitRequestFields      512
LimitRequestFieldSize   1000000

LimitMemoryMax          1000000000
LimitMemoryRedline      800000000
MemoryDepletionPolicy   exit      

UploadDir               .
UploadAutoDelete        on

AuthGroupFile           groups.db
AuthUserFile            users.db
AuthDigestQop           auth

SetConnector            netConnector
AddOutputFilter         rangeFilter
AddFilter               chunkFilter
AddInputFilter          uploadFilter
AddHandler              fileHandler html gif jpeg jpg png pdf ico css js ""

<if CGI_MODULE>
    LoadModule cgiHandler mod_cgi
    AddHandler cgiHandler exe cgi cgi-nph bat cmd pl py
    ScriptAlias /cgi-bin/ "${SERVER_ROOT}/cgi-bin/"
    ScriptAlias /MyScripts/ "${SERVER_ROOT}/cgi-bin/"
    ScriptAlias /YourScripts/ "${DOCUMENT_ROOT}/"
    Action application/x-appweb-perl /usr/bin/perl
    Action application/x-appweb-python /usr/bin/python
    Action application/x-appweb-lua /usr/bin/lua
    Action application/x-appweb-ruby /usr/bin/ruby
    Action application/x-appweb-php /usr/bin/php
</if>

<if DIR_MODULE>
    Options Indexes
    IndexOrder ascending name
    IndexOptions FancyIndexing FoldersFirst
</if>

<if EJS_MODULE>
    LoadModule ejsHandler mod_ejs
    # UnloadModule ejsHandler 60
    AddHandler ejsHandler ejs es
</if>

<if PHP_MODULE>
    LoadModule phpHandler mod_php
    AddHandler phpHandler php
</if>

<if ESP_MODULE>
    LoadModule espHandler mod_esp
    # UnloadModule espHandler 60
    AddHandler espHandler *.esp
    EspDir cache cache
    EspUpdate on
    EspShowErrors on
    EspKeepSource on
    include ${LIBDIR}/esp.conf

    EspAppAlias /app ./app mvc

    #
    #   Equivalent definition to EspAppAlias
    #
    <Route /app2/>
        RouteName esp/alias.tst
        Prefix /app2
        DocumentRoot app
        AddHandler espHandler
        EspDir mvc
        EspRoutePack mvc
        # MOB - test
        # EspLoad app app/cache/app
        # LogRoutes
#MOB - why no target?
    </Route>

    # EspRoute default GET ^/{controller}/{action}  ${controller}-${action} ${controller}.c
    # EspRoutePack mvc /prefix controller
    # EspRoutePack restful /prefix controller
</if>

#
#   Test route pattern matching
#
<Route ^/route/(user|admin)/{cmd}/[^a-z]\{2}(\.[hH][tT][mM][lL])$>
    RouteName route/fullpat.tst
    Target write 200 "${cmd}"
</Route>

<Route ^/route/tokens/{cmd}$>
    RouteName token.tst
    Target write 200 "${cmd}-${request:query}"
</Route>

<Route ^/route/optional/{controller}(~/{action}~) >
    RouteName route/optional.tst
    Target write 200 "${controller}-${action}"
</Route>

<if PHP_MODULE>
    <Route ^/route/missing-ext/((?!\.php).*)$>
        RouteName route/missing.tst
        Prefix /route/missing-ext
        SetHandler phpHandler
        Condition exists ${request:filename}
        Target file $1.php
    </Route>
</if>

<Route ^/route/auth>
    RouteName route/auth.tst
    Prefix /route/auth
    DocumentRoot "${DOCUMENT_ROOT}/basic"
    AuthType basic
    AuthName "Acme Inc"
    Require valid-user
</Route>

#
#   Language tests
#
<Route ^/lang/root>
    Prefix /lang/root
    RouteName lang/root.tst
    AddLanguageRoot en english
    Target file
</Route>

<Route ^/lang/suffix/>
    RouteName lang/suffix.tst
    Prefix /lang/suffix
    AddLanguage en en before
    Target file
</Route>

<Route ^/lang/target/(.*)(\.html)$>
    RouteName lang/target.tst
    Prefix /lang/target
    AddLanguage en en 
    Target file $1.${request:Language=ge}$2
</Route>

<Route ^/lang/default/(.*)(\.html)$>
    RouteName lang/default.tst
    Prefix /lang/default
    AddLanguage fr fr 
    DefaultLanguage fr
    Target file $1.${request:Language}$2
    # Target file ${DOCUMENT_ROOT}/$1.${request:Language}$2
</Route>

<Route ^/lang/catchall/>
    RouteName lang/catchall.tst
    Prefix /lang/catchall
    AddLanguage "" en before
    Target file
</Route>

#
#   Header and Query tests
#
<Route ^/route/header>
    RouteName route/header.tst
    Header  User-Agent custom
    Target write 200 "${header:User-Agent}"
</Route>

<Route ^/route/query>
    RouteName route/query.tst
    Query  name peter
    Target write 200 "${query:name}"
</Route>

#
#   Condition tests
#
<Route ^/route/condition>
    RouteName route/condition.tst
    Condition ! match "(https|custom)" ${request:scheme} 
    Target write 200 "${request:scheme}"
</Route>

#
#   Updates
#
<Route ^/route/update/cmd>
    RouteName route/cmd.tst
    Update cmd "touch /tmp/route-update-cmd.tmp"
    Target write 200 "${request:error}UPDATED"
</Route>

<Route ^/route/update/var>
    RouteName route/var.tst
    Update field from ${header:from}
    Target write 200 "${field:from}"
</Route>

#
#   Misc
#
<Route ^/compress>
    RouteName compress/gzip.tst
    Compress  gzip
</Route


<if SSL_MODULE>
    LoadModule sslModule mod_ssl
    SSLCertificateFile "ssl/server.crt"
    SSLCertificateKeyFile "ssl/server.key.pem"

    Listen 4110     # SSL - dont remove comment
    <VirtualHost *:4110>
        DocumentRoot "web"
        SSLEngine on
    </VirtualHost>                                  
</if>

Alias /SimpleAlias "${DOCUMENT_ROOT}"
Alias /aliasDir/ ${DOCUMENT_ROOT}/alias/
Alias /aliasFile ${DOCUMENT_ROOT}/alias/atest.html
Alias /AliasForMyDocuments/ "${DOCUMENT_ROOT}/My Documents/"

Listen 4111             # VHOST - dont remove comment
NameVirtualHost *:4111
<VirtualHost *:4111>
    ServerName      localhost:4111
    DocumentRoot    "${SERVER_ROOT}/web/vhost/namehost1"
</VirtualHost>

<VirtualHost *:4111>
    ServerName 127.0.0.1:4111
    DocumentRoot "${SERVER_ROOT}/web/vhost/namehost2"
    ResetPipeline
    AddHandler fileHandler html gif jpeg jpg png pdf ico css js ""
    <if EJS_MODULE>
        AddHandler ejsHandler ejs
        DirectoryIndex index.ejs
    </if>
</VirtualHost>

#
#   IP virtual host
#
Listen 4112             # IPHOST
<VirtualHost *:4112>
    DocumentRoot "${SERVER_ROOT}/web/vhost/iphost"
    AuthType basic
    AuthName "Acme Inc"
    Require user mary
</VirtualHost>

#
#   Routes with basic authentication
#
<Route /basic>
    AuthType basic
    AuthName "Acme Inc"
    Require valid-user
    <Route /basic/group>
        Require group acmeExec
    </Route>
    <Route /basic/user>
        Require user joshua
    </Route>
</Route>

<Route /digest>
    AuthType digest
    AuthName "Acme Inc"
    Require valid-user
    <Route /digest/group>
        Require group acmeExec
    </Route>
    <Route /digest/user>
        Require user joshua
    </Route>
</Route>

#
#   Test external apps
#
<Route /blog>
    DocumentRoot /Users/mob/git/www
    DirectoryIndex index.php
</Route>
<Route /forum/>
    Prefix /forum/
    DocumentRoot /Users/mob/git/www/forum/appweb
    DirectoryIndex index.php
</Route>

<Route /doc/>
    DocumentRoot /Users/mob/git/appweb/doc
    Prefix /doc
</Route>

include conf/*.conf
