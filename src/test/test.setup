/*
    Initialize for Appweb unit tests
 */
require ejs.unix

let conf        = Path("appweb.conf").readString()
const HOST      = (test.hostOs == "VXWORKS") ? "192.168.200.1" : "127.0.0.1"
const HOSTV6    = (test.hostOs == "VXWORKS") ? "192.168.200.1" : "[::1]"
const HTTP      = "http://"  + HOST   + ":" + conf.replace(/.*Listen *([0-9]+) *# MAIN.*/ms, "$1")
const SSL       = "https://" + HOST   + ":" + conf.replace(/.*Listen *([0-9]+) *# SSL.*/ms, "$1")
const NAMED     = "http://"  + HOST   + ":" + conf.replace(/.*Listen *([0-9]+) *# NAMED.*/ms, "$1")
const VIP       = "http://"  + HOST   + ":" + conf.replace(/.*Listen *([0-9]+) *# IPHOST.*/ms, "$1")
const IPV6      = "http://"  + HOSTV6 + ":" + conf.replace(/.*Listen *\[::\]:([0-9]+) *# IPV6.*/ms, "$1")
const PIDFILE   = ".pidfile"

/*
    Provide definitions via App.config.uris[]
 */
shareUri("http", HTTP)
shareUri("ssl", SSL)
shareUri("named", NAMED)
shareUri("virt", VIP)
if (test.hostOs != "VXWORKS") {
    shareUri("ipv6", IPV6)
}

let cmd
if (test.hostOs == "VXWORKS") {
    // export WIND_HOME=/home/mob/WindRiver
    // export WIND_PLATFORM=vxworks-6.8
/*
    let base: Path = App.getenv("WIND_BASE") || "/home/mob/WindRiver/vxworks-6.8"
    let host: Path = App.getenv("WIND_HOST_TYPE") || "x86-linux2"
    let vxsim: Path = base.join("host", host, "bin/vxsim")
    let vxworks: Path = base.join("workspace", "test-image2", "default/vxWorks")
    cmd = vxsim + " -f " + vxworks + " -s vxargs -l vx.log"
    print("CMD", cmd)
*/
    cmd = "vxrun " + HOST + " " + test.top.join("out", test.hostSystem, "bin", "appweb.out")
    // print(cmd)

} else {
    cmd = Cmd.locate("appweb").portable + " --log trace.txt:4 --name forAppwebTest --config appweb.conf"
}

if (test.phase == "init") {
    if (!App.getenv("SECOND")) {
        rm(find(".", "*.mod"))
        rm(find(".", "*.tdat"))
        cleanDir("web/tmp")
    }
    startService(cmd, {address: HTTP})
} else {
    stopService()
}
rm(find(".", "*.tdat"))
