/*
    Initialize for Appweb unit tests
 */
require ejs.unix

let conf            = Path("appweb.conf").readString()
const PORT          = conf.replace(/.*Listen *([0-9]+) *# MAIN.*/ms, "$1")
const SSL_PORT      = conf.replace(/.*Listen *([0-9]+) *# SSL.*/ms, "$1")
const NAMED_PORT    = conf.replace(/.*Listen *([0-9]+) *# NAMED.*/ms, "$1")
const VIP_PORT      = conf.replace(/.*Listen *([0-9]+) *# IPHOST.*/ms, "$1")
const IPV6_PORT     = conf.replace(/.*Listen *\[::\]:([0-9]+) *# IPV6.*/ms, "$1")
const TARGET        = (test.hostOs == "VXWORKS") ? "192.168.200.1" : "127.0.0.1"
const PIDFILE       = ".pidfile"

/*
    Provide definitions via App.test.session[]
 */
share("main",   "http://" + TARGET + ":" + PORT)
share("ssl", "https://" + TARGET + ":" + SSL_PORT)
share("named", "http://" + TARGET + ":" + NAMED_PORT)
share("virt", "http://" + TARGET + ":" + VIP_PORT)

//  MOB -- must change host
share("ipv6", "http://[::1]:" + IPV6_PORT)

let cmd
if (test.hostOs == "VXWORKS") {
    // export WIND_HOME=/home/mob/WindRiver
    // export WIND_PLATFORM=vxworks-6.8
/*
    let base: Path = App.getenv("WIND_BASE") || "/home/mob/WindRiver/vxworks-6.8"
    let host: Path = App.getenv("WIND_HOST_TYPE") || "x86-linux2"
    let vxsim: Path = base.join("host", host, "bin/vxsim")
    let vxworks: Path = base.join("workspace", "test-image2", "default/vxWorks")
    cmd = vxsim + " -f " + vxworks + " -s vxargs -l vx.log"
    print("CMD", cmd)
*/
    cmd = "vxrun"

} else {
    cmd = Cmd.locate("appweb").portable + " --log trace.txt:4 --name forAppwebTest --config appweb.conf"
}

if (test.phase == "init") {
    if (!App.getenv("SECOND")) {
        for each (file in find("cache", "*.mod")) {
            rm(file)
        }
        cleanDir("web/tmp")
        for each (f in find(".", "*.tdat", true)) {
            rm(f)
        }
    }
    startService(cmd, {address: "http://" + TARGET + ":" + PORT})
} else {
    stopService()
    for each (f in find(".", "*.tdat", true)) {
        rm(f)
    }
}

/*
    share("port", PORT)
    share("vhostPort", NAMED_PORT)
    share("host", http://" + TARGET + ":" + PORT)
*/
