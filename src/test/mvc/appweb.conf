#
#   appweb.conf -- Appweb configuration for test
#   

ErrorLog                stderr
LogLevel                0
LogTrace                3 headers,request,response,time
LogTraceFilter          4096 "*" "gif,jpg,png,ico,css,ico"

Listen                  4000

DirectoryIndex          index.esp
PutMethod               on
KeepAlive               on
UploadDir               /tmp
UploadAutoDelete        on

#   MOB - is client cache right?
Cache                   86400 html gif jpeg jpg png pdf ico js

SetConnector            netConnector
AddOutputFilter         rangeFilter
AddFilter               chunkFilter
AddInputFilter          uploadFilter
AddHandler              fileHandler html git jpeg jpg png pdf ico css js

<if ESP_MODULE>
    LoadModule espHandler mod_esp
    AddHandler espHandler *.esp
    include /Users/mob/git/appweb/out/lib/esp.conf
    EspDir cache cache
    EspKeepSource on
    EspShowErrors on
    EspUpdate on
    EspLifespan 3600
    EspRoute esp ALL %\.[eE][sS][pP]$

    #
    #   Use the EspAlias to define an application. This creates a URI location for "/" and uses the ESP application
    #   located at ".".  This defines a location, routes, and configures the espHandler to serve requests to this 
    #   URI location.
    #
    EspAlias / . mvc

    EspLoad mvc
    EspUpdate off

    #
    #   Alternatively uncomment this to use a location definition instead of the EspAlias above. This provides more
    #   control over exactly how the application is defined and configured.
    #
    # <Location />
        #
        #   Set the default lifespan for cached HTML content. Use espCacheControl in a controller to enable
        #
        # EspLifespan 3600

        #
        #   Keep the compiled view source in the cache directory
        #
        # EspKeepSource on

        #
        #   Automatically recompile and reload modified controllers, views and esp web pages
        #
        # EspUpdate on

        #
        #   Show recompilation and internal errors in the browser
        #
        # EspShowErrors on

        #
        #   Reset the route table. This clears inherited ESP routes to start afresh.
        #
        # EspReset routes

        #
        #   Define the directory used for views. Can also use EspDir for: cache, controllers, layouts, static
        #   Use "mvc" to set all directory names to their Model-View-Controller defaults.
        #
        # EspDir views views

        #
        #   Define a route for the home page
        #
        # EspRoute home    GET,POST,PUT     %^/$                        ${STATIC_DIR}/index.esp

        #
        #   Define a route for static content
        #
        # EspRoute static  GET              %^/static/(.*)              ${STATIC_DIR}/$1

        #
        #   Define a route for controller/actions
        #
        # EspRoute default GET,POST         ^/{controller}(/{action})   ${controller}-${action} ${controller}.c
        
        #
        #   Define a route for "*.esp" pages
        #
        # EspRoute esp GET,POST,PUT,DELETE  %\.[eE][sS][pP]$

        #
        #   Alternatively, instead of defining routes one-by-one, you can enable a set of "RESTful" routes.
        #   This can be used without args, or can be used as: "EspRestfulRoutes /URI-prefix controllerName".
        #       EspRoute init GET       ^/{controller}/init       ${controller}-init      ${controller}.c
        #       EspRoute index GET      ^/{controller}(/)$        ${controller}-index     ${controller}.c
        #       EspRoute create POST    ^/{controller}(/)         ${controller}-create    ${controller}.c
        #       EspRoute edit GET       ^/{controller}/{id}/edit  ${controller}-edit      ${controller}.c
        #       EspRoute show GET       ^/{controller}/{id}       ${controller}-show      ${controller}.c
        #       EspRoute update PUT     ^/{controller}/{id}       ${controller}-update    ${controller}.c
        #       EspRoute destroy DELETE ^/{controller}/{id}       ${controller}-destroy   ${controller}.c
        #       EspRoute default ALL    ^/{controller}(/{action}) ${controller}-${action} ${controller}.c
        #
        # EspRestfulRoutes

        #
        #   Ensure the espHandler is responsible for serving content on this route   
        #
        # AddHandler espHandler
    # </Location>
</if>

#
#   SSL definition
#
#	<if SSL_MODULE>
#	    LoadModule sslModule mod_ssl
#	    SSLCertificateFile "server.crt"
#	    SSLCertificateKeyFile "server.key.pem"
#	    Listen 443
#	    <VirtualHost *:443>
#	        DocumentRoot "web"
#	        SSLEngine on
#	    </VirtualHost>                                  
#	</if>

# AddHandler fileHandler ""
