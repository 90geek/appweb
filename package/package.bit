/*
    package.bit
 */

Bit.load({
    targets: {
        removeFiles: {
            enable: bit.platform.like == 'windows',
            type: 'exe',
            rule: 'gui'
            sources: [ 'windows/removeFiles.c' ],
            platforms: [ 'local' ],
        },

        'root-install': {
            home: '${TOP}',
			action: '',
			depends: ['compile'],
            'generate-make': "
                @${BIN}/appman stop disable uninstall >/dev/null 2>&1 ; true
                rm -f $(BIT_PRD_PREFIX)/latest $(BIT_UBIN_PREFIX)/bit
                for n in appman appweb authpass esp; do rm -f $(BIT_UBIN_PREFIX)/$$n ; done
                install -d -m 755 $(BIT_CFG_PREFIX) $(BIT_BIN_PREFIX)
                install -m 644 src/server/appweb.conf src/server/esp.conf src/server/mime.types $(BIT_CFG_PREFIX)
                cp -R -P ${BIN}/* $(BIT_BIN_PREFIX)
                install -m 644 -o root -g wheel ./package/macosx/com.embedthis.appweb.plist /Library/LaunchDaemons
                $(OS)-$(ARCH)-$(PROFILE)/bin/setConfig --home $(BIT_CFG_PREFIX) --documents $(BIT_WEB_PREFIX) --logs $(BIT_LOG_PREFIX) --cache $(BIT_SPL_PREFIX)/cache --modules $(BIT_BIN_PREFIX)  $(BIT_CFG_PREFIX)/appweb.conf
                ln -s $(VERSION) $(BIT_PRD_PREFIX)/latest
                for n in appman appweb authpass esp; do \\
                    rm -f $(BIT_UBIN_PREFIX)/$$n ; \\
                    ln -s $(BIT_BIN_PREFIX)/$$n $(BIT_UBIN_PREFIX)/$$n ; \\
                done
                ${BIN}/appman install enable start
            ",
            'generate-nmake': "
                ${BIN}/appman stop disable uninstall
                xcopy /I /S /Y /Q $(CONFIG)\\bin \"$(BIT_BIN_PREFIX)\"
                del /Q \"$(BIT_BIN_PREFIX)\\*.pdb\"
                del /Q \"$(BIT_BIN_PREFIX)\\*.exp\"
                del /Q \"$(BIT_BIN_PREFIX)\\*.lib\"
                ${BIN}/appman install enable start
            ",
        },

        install: {
            home: '${TOP}',
            depends: ['compile'],
            action: "installBinary()",
            'generate-make': "sudo $(MAKE) -C ${TOP} -f projects/$(PRODUCT)-$(OS)-$(PROFILE).mk $(MAKEFLAGS) root-install",
            'generate-nmake': "nmake -nologo -f ${TOP}/projects/$(PRODUCT)-$(OS)-$(PROFILE).nmake root-install",
        },

        'root-uninstall': {
            home: '${TOP}',
			action: '',
            'generate-make': "
				$(BIN)/appman stop disable uninstall
				rm -fr $(BIT_CFG_PREFIX) $(BIT_PRD_PREFIX)
            ",
            'generate-nmake': "
				$(BIN)/appman stop disable uninstall
                if exist \"$(BIT_CFG_PREFIX)\" rd /Q /S \"$(BIT_CFG_PREFIX)\"
                if exist \"$(BIT_PRD_PREFIX)\" rd /Q /S \"$(BIT_PRD_PREFIX)\"
            ",
		},

        uninstall: {
            home: '${TOP}',
            action: "uninstallBinary()"
            'generate-make': "sudo $(MAKE) -C ${TOP} -f projects/$(PRODUCT)-$(OS)-$(PROFILE).mk $(MAKEFLAGS) root-uninstall",
            'generate-nmake': "nmake -nologo -f ${TOP}/projects/$(PRODUCT)-$(OS)-$(PROFILE).nmake root-uninstall",
        },

        package: {
            home: '${TOP}',
            enable: "'${OS}' == 'linux' || '${OS}' == 'macosx' || '${OS}' == 'windows'",
            depends: ['packageBinary', 'packageSource', 'packageCombo'],
        },

        packageBinary: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageBinaryFiles()",
        },

        packageSource: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageSourceFiles()",
        },

        packageCombo: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageComboFiles()",
        },

    },
})
