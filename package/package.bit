/*
    package.bit - Package targets for Appweb
 */

Bit.load({
    targets: {
        start: {
            enable: "bit.platform.like == 'unix' || bit.platform.like == 'windows'",
            home: '${TOP}',
            action: "startService()",
            depends: ['compile', 'stop'],
            generate: "${BIN}/appman install enable start",
        },

        stop: {
            enable: "bit.platform.like == 'unix' || bit.platform.like == 'windows'",
            home: '${TOP}',
            action: "stopService()",
            depends: ['compile'],
            generate: "@${BIN}/appman stop disable uninstall >/dev/null 2>&1 ; true"
        },

        install: {
            home: '${TOP}',
            generate: ' ',
            depends: [ 'all', 'stop', 'installBinary', 'start' ],
            action: " 
                trace('Info', bit.settings.title + ' installed at ' + bit.prefixes.vapp)
                trace('Info', 'Configuration directory ' + bit.prefixes.etc)
                trace('Info', 'Documents directory ' + bit.prefixes.web)
                trace('Info', 'Executables directory ' + bit.prefixes.vapp.join('bin'))
                trace('Info', 'Use \"man appweb\" for usage')
                let pid = Cmd.ps(/bin.appweb$/)
                if (pid && pid.length > 0) {
                    trace('Info', bit.settings.title + ' PID: ' + pid[0].pid)
                }
                trace('Info', 'Use appman [start|stop|restart] to control')
                let config = bit.prefixes.etc.join('install.conf').readString()
                let [,port] = RegExp('Listen *(.*)').exec(config)
                let address = ('http://localhost:' + port).replace(':80')
                trace('Info', 'Browse to ' + address)
            ",
        },

        uninstall: {
            depends: [ 'build', 'stop' ],
            action: "
                for each (f in bit.prefixes.cache.files()) {
                    removeFile(f)
                }
                removeFile(bit.prefixes.etc.join('appweb.conf'))
                removeFile(bit.prefixes.etc.join('esp.conf'))
                removeFile(bit.prefixes.etc.join('mine.types'))
                removeFile(bit.prefixes.etc.join('install.conf'))
                removeDir(bit.prefixes.inc.join(bit.settings.product))
                uninstallBinary()
            ",
            'generate-action': true,
        },
    },
})
