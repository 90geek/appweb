/*
    package.bit
 */

Bit.load({
    targets: {
        removeFiles: {
            enable: bit.platform.like == 'windows',
            type: 'exe',
            rule: 'gui'
            sources: [ 'windows/removeFiles.c' ],
            depends: [ 'libmpr' ],
            platforms: [ 'local' ],
        },

		'.prefixes': {
            home: '${TOP}',
			action: '',
            path: '${INC}/.prefixes',
            files: [ '${TOP}/projects/$(PRODUCT)-$(OS)-$(PROFILE)-bit.h' ],
            'generate-make': "
			    ${BIN}/ejs ${TOP}/bits/getbitvals ${TOP}/projects/$(PRODUCT)-$(OS)-$(PROFILE)-bit.h PRODUCT VERSION CFG_PREFIX PRD_PREFIX WEB_PREFIX LOG_PREFIX BIN_PREFIX SPL_PREFIX UBIN_PREFIX >${INC}/.prefixes; chmod 666 ${INC}/.prefixes",
            'generate-nmake': "
				${BIN}/ejs ${TOP}/bits/getbitvals ${TOP}/projects/$(PRODUCT)-$(OS)-$(PROFILE)-bit.h PRODUCT VERSION CFG_PREFIX PRD_PREFIX WEB_PREFIX LOG_PREFIX BIN_PREFIX SPL_PREFIX UBIN_PREFIX >.prefixes",
		},

        'root-install': {
            home: '${TOP}',
			action: '',
			depends: ['compile', '.prefixes'],
            'generate-make': "
                ifeq ($(BIT_BIN_PREFIX),)
                    sudo $(MAKE) -f projects/$(PRODUCT)-$(OS)-$(PROFILE).mk $@
                else
                    rm -f $(BIT_PRD_PREFIX)/latest $(BIT_UBIN_PREFIX)/bit
                    @${BIN}/appman stop disable uninstall >/dev/null 2>&1 ; true
                    rm -f $(BIT_PRD_PREFIX)/latest
                    for n in appman appweb authpass esp; do rm -f $(BIT_UBIN_PREFIX)/$$n ; done
                    install -d -m 755 $(BIT_CFG_PREFIX) $(BIT_BIN_PREFIX)
                    install -m 644 src/server/appweb.conf src/server/esp.conf src/server/mime.types $(BIT_CFG_PREFIX)
                    cp -R -P ${BIN}/* $(BIT_BIN_PREFIX)
                    install -m 644 -o root -g wheel ./package/macosx/com.embedthis.appweb.plist /Library/LaunchDaemons
                    $(OS)-$(ARCH)-$(PROFILE)/bin/setConfig --home $(BIT_CFG_PREFIX) --documents $(BIT_WEB_PREFIX) --logs $(BIT_LOG_PREFIX) --cache $(BIT_SPL_PREFIX)/cache --modules $(BIT_BIN_PREFIX)  $(BIT_CFG_PREFIX)/appweb.conf
                    ln -s $(BIT_VERSION) $(BIT_PRD_PREFIX)/latest
                    for n in appman appweb authpass esp; do \\
                        rm -f $(BIT_UBIN_PREFIX)/$$n ; \\
                        ln -s $(BIT_BIN_PREFIX)/$$n $(BIT_UBIN_PREFIX)/$$n ; \\
                    done
                    ${BIN}/appman install enable start
                endif
            ",
            'generate-nmake': "
                !IF EXISTS(.prefixes)
                    ${BIN}/appman stop disable uninstall
                    xcopy /I /S /Y /Q $(CONFIG)\\bin \"$(BIT_BIN_PREFIX)\"
                    ${BIN}/appman install enable start
                !ELSE
				    nmake -nologo -f ${TOP}/projects/$(PRODUCT)-$(OS)-$(PROFILE).nmake $@
                !ENDIF
            ",
        },

        install: {
            home: '${TOP}',
            depends: ['compile'],
            action: "installBinary()",
            'generate-make': "sudo $(MAKE) -C ${TOP} -f projects/$(PRODUCT)-$(OS)-$(PROFILE).mk root-install",
            'generate-nmake': "nmake -nologo -f ${TOP}/projects/$(PRODUCT)-$(OS)-$(PROFILE).nmake root-install",
        },

        'root-uninstall': {
            home: '${TOP}',
			action: '',
			depends: ['.prefixes'],
            'generate-make': "
				$(BIN)/appman stop disable uninstall
				rm -fr $(BIT_CFG_PREFIX) $(BIT_PRD_PREFIX)
            ",
            'generate-nmake': "
				$(BIN)/appman stop disable uninstall
                del /Q \"$(BIT_PRD_PREFIX)\"
            ",
		},

        uninstall: {
            home: '${TOP}',
            action: "uninstallBinary()"
            'generate-make': "sudo $(MAKE) -C ${TOP} -f projects/$(PRODUCT)-$(OS)-$(PROFILE).mk root-uninstall",
            'generate-nmake': "nmake -nologo -f ${TOP}/projects/$(PRODUCT)-$(OS)-$(PROFILE).nmake root-uninstall",
        },

        package: {
            home: '${TOP}',
            enable: "'${OS}' == 'linux' || '${OS}' == 'macosx' || '${OS}' == 'windows'",
            depends: ['packageBinary', 'packageSource', 'packageCombo'],
        },

        packageBinary: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageBinaryFiles()",
        },

        packageSource: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageSourceFiles()",
        },

        packageCombo: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageComboFiles()",
        },

    },
})
