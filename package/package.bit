/*
    package.bit
 */

Bit.load({
    targets: {
        removeFiles: {
            enable: "bit.platform.like == 'windows'",
            type: 'exe',
            rule: 'gui'
            sources: [ 'windows/removeFiles.c' ],
            platforms: [ 'local' ],
        },

        deploy: {
            home: '${TOP}',
            action: "packageDeploy()",
            depends: ['compile'],
            'generate-make': "
                for n in appman appweb authpass esp; do rm -f $(BIT_UBIN_PREFIX)/$$n ; done
                mkdir -p '$(BIT_CFG_PREFIX)' '$(BIT_BIN_PREFIX)' '$(BIT_INC_PREFIX)' '$(BIT_WEB_PREFIX)' '$(BIT_VER_PREFIX)/man/man1'
                cp ${INC}/*.h $(BIT_INC_PREFIX)
                cp src/server/appweb.conf src/server/esp.conf src/server/mime.types $(BIT_CFG_PREFIX)
                account=`cat /etc/passwd | grep www | sed -e 's/:.*//'` ; \\
                install -d -m 755 -g $$account -o $$account '$(BIT_SPL_PREFIX)' '$(BIT_LOG_PREFIX)'
                cp -R -P ${BIN}/* $(BIT_BIN_PREFIX)
                cp -R -P src/server/web/* $(BIT_WEB_PREFIX)
                rm -f '$(BIT_PRD_PREFIX)/latest'
                ln -s $(VERSION) $(BIT_PRD_PREFIX)/latest
                for n in appman appweb authpass esp; do \\
                    rm -f $(BIT_UBIN_PREFIX)/$$n ; \\
                    ln -s $(BIT_BIN_PREFIX)/$$n $(BIT_UBIN_PREFIX)/$$n ; \\
                done
                for n in appman.1 appweb.1 appwebMonitor.1 authpass.1 esp.1 http.1 makerom.1 ; do \\
                    rm -f $(BIT_VER_PREFIX)/man/man1/$$n $(BIT_MAN_PREFIX)/$$n ; \\
                    cp doc/man/$$n $(BIT_VER_PREFIX)/man/man1 ; \\
                    ln -s $(BIT_VER_PREFIX)/man/man1/$$n $(BIT_MAN_PREFIX)/$$n ; \\
                done
                echo 'Documents \"$(BIT_WEB_PREFIX)\"\\nListen 80\"\\nset LOG_DIR \"$(BIT_LOG_PREFIX)\"\\nset CACHE_DIR \"$(BIT_SPL_PREFIX)/cache\"' >$(BIT_CFG_PREFIX)/install.conf
            ",
            'generate-nmake': "
                xcopy /I /S /Y /Q $(CONFIG)\\bin \"$(BIT_BIN_PREFIX)\"
                del /Q \"$(BIT_BIN_PREFIX)\\*.pdb\"
                del /Q \"$(BIT_BIN_PREFIX)\\*.exp\"
                del /Q \"$(BIT_BIN_PREFIX)\\*.lib\"
                copy src/server/appweb.conf src/server/esp.conf src/server/install.conf src/server/mine.types \"$(BIT_PRD_PREFIX)\"
                xcopy /I /S /Y /Q src/server/web \"$(BIT_WEB_PREFIX)\"
                echo 'Documents \"$(BIT_WEB_PREFIX)\"\\nListen 80\"\\nset LOG_DIR \"$(BIT_LOG_PREFIX)\"\\nset CACHE_DIR \"$(BIT_SPL_PREFIX)/cache\"' >$(BIT_CFG_PREFIX)/install.conf
            ",
        },

        deployService: {
            enable: "bit.platform.like == 'posix' || bit.platform.like == 'windows'",
            home: '${TOP}',
            action: "packageDeployService()",
            depends: ['compile'],
            'generate-macosx': "
                install -m 755 -d /Library/LaunchDaemons
                install -m 644 -o root -g wheel package/macosx/com.embedthis.appweb.plist /Library/LaunchDaemons
            ",
            'generate-linux': "install -m 755 -o root -g bin package/linux/appweb.init /etc/init.d/appweb",
        },

        start: {
            enable: "bit.platform.like == 'posix' || bit.platform.like == 'windows'",
            home: '${TOP}',
            action: "startService()",
            depends: ['compile', 'stop'],
            generate: "${BIN}/appman install enable start",
        },

        stop: {
            enable: "bit.platform.like == 'posix' || bit.platform.like == 'windows'",
            home: '${TOP}',
            action: "stopService()",
            depends: ['compile'],
            generate: "@${BIN}/appman stop disable uninstall >/dev/null 2>&1 ; true"
        },

        install: {
            enable: "bit.platform.like == 'posix' || bit.platform.like == 'windows'",
            home: '${TOP}',
            action: " ",
            depends: ['compile', 'stop', 'deploy', 'deployService', 'deployPost', 'start'],
            'generate': ' ',
        },

        deployPost: {
            enable: "bit.platform.like == 'posix' || bit.platform.like == 'windows'",
            home: '${TOP}',
            action: "installBinary()",
            'generate': ' ',
        },

        uninstall: {
            enable: "bit.platform.like == 'posix' || bit.platform.like == 'windows'",
            home: '${TOP}',
            action: "uninstallBinary()"
            depends: ['compile', 'stop']
            'generate-make': "
                for n in appman appweb authpass esp; do rm -f $(BIT_UBIN_PREFIX)/$$n ; done
                for n in $(BIT_VER_PREFIX)/man/man1/*.1; do \\
                    base=`basename $$n` ; \\
                    rm -f $(BIT_MAN_PREFIX)/$$base ; \\
                done
                rm -fr '$(BIT_CFG_PREFIX)' '$(BIT_PRD_PREFIX)' '$(BIT_WEB_PREFIX)' '$(BIT_LOG_PREFIX)' '$(BIT_SPL_PREFIX)'
            ",
            'generate-nmake': "if exist \"$(BIT_PRD_PREFIX)\" rd /Q /S \"$(BIT_PRD_PREFIX)\"",
        },

        package: {
            home: '${TOP}',
            enable: "'${OS}' == 'linux' || '${OS}' == 'macosx' || '${OS}' == 'windows'",
            depends: ['packageBinary', 'packageSource', 'packageCombo'],
        },

        packageBinary: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageBinaryFiles()",
        },

        packageSource: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageSourceFiles()",
        },

        packageCombo: {
            home: '${TOP}',
            depends: ['build'],
            action: "packageComboFiles()",
        },

    },
})
