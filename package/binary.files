#
#	binary.files - Files needed for the binary installation 
#
#	Copyright (c) Embedthis Software LLC, 2003-2011. All Rights Reserved.
#

# TRACE=1

usePrefixes CFG BIN LIB LOG PRD VER WEB 

${CHMOD} 755 "${BLD_CFG_PREFIX}"

#   BARE will be set if doing "make deploy" which calls makeInstall --bare
if [ "$BARE" = 0 ] ; then
    if [ "${TASK}" = Remove -a -f "${BLD_BIN_PREFIX}/linkup" ] ; then
        cp "${BLD_BIN_PREFIX}/linkup" /tmp/linkup$$
    fi
    cpy -w -t -e doc/licenses/LICENSE.TXT doc/product/README.TXT doc/product/COPYRIGHT.TXT "${BLD_CFG_PREFIX}"
    if [ "$WITH_OPENWRT" != 1 ] ; then
        cpy -e -m 0755 package/uninstall.sh "${BLD_BIN_PREFIX}/uninstall"
    fi
    cpy -e -m 0755 package/linkup "${BLD_BIN_PREFIX}/linkup"
    if [ -x $BLD_BIN_DIR/angel${BLD_EXE} ] ; then
        cpy -s -m 755 "${BLD_BIN_DIR}/angel${BLD_EXE}" "${BLD_BIN_PREFIX}"
    fi
    cpy -s -m 755 -d ${BLD_BIN_DIR} auth${BLD_EXE} makerom${BLD_EXE} "${BLD_BIN_PREFIX}"
    cpy -s -m 755 ${BLD_BIN_DIR}/http${BLD_EXE} "${BLD_BIN_PREFIX}"
    if [ "$BLD_FEATURE_SQLITE" = 1 ] ; then
        cpy -m 755 -s -d ${BLD_BIN_DIR} sqlite${BLD_EXE} "${BLD_BIN_PREFIX}"
    fi
fi

cpy -s -m 755 "${BLD_BIN_DIR}/appweb${BLD_EXE}" "${BLD_BIN_PREFIX}"

if `ls ${BLD_LIB_DIR}/*${BLD_SHOBJ}* >/dev/null 2>&1` ; then
	cpy -s -m 755 -d ${BLD_LIB_DIR} "*${BLD_SHOBJ}*" "${BLD_LIB_PREFIX}"
fi

cpy src/server/mime.types "${BLD_CFG_PREFIX}"
cpy -d src/server "*.db" "${BLD_CFG_PREFIX}"

if [ "$WITH_TESTWEB" != "" ] ; then
	webFilter='mgmt/'
    cpy -f "${webFilter}" "src/server/web/." "${BLD_WEB_PREFIX}"
    if [ "${TASK}" != Remove ] ; then
        chmod +x "${BLD_WEB_PREFIX}/test/"{*.cgi,*.pl,*.py}
    fi
else
    cpy src/server/web/min-index.html "${BLD_WEB_PREFIX}/appweb.html"
fi

makeDir "${BLD_CFG_PREFIX}/conf"
if [ "$WITH_CONF" = "" ] ; then
    cpy "src/server/appweb.conf" "${BLD_CFG_PREFIX}"
else
    cpy "$WITH_CONF" "${BLD_CFG_PREFIX}/appweb.conf"
fi
if [ "$BLD_FEATURE_ESP" = "1" ] ; then
    cpy "src/server/esp.conf" "${BLD_LIB_PREFIX}"
fi

if [ "$BARE" = 0 ] ; then
    makeDir "${BLD_LOG_PREFIX}"
    touch "${BLD_LOG_PREFIX}"/error.log
fi

#
#   Patch appweb.conf
#
rm -f "${BLD_CFG_PREFIX}/conf/appweb.conf"
if [ "${TASK}" != Remove ] ; then
    (
        # MOB - if using BARE - should be using flat config
        dir=$BLD_CFG_PREFIX
        for v in BLD_CFG_PREFIX BLD_WEB_PREFIX BLD_DOC_PREFIX BLD_LIB_PREFIX BLD_LOG_PREFIX BLD_SPL_PREFIX ; do
            eval export $v=$`echo ORIG_${v}`
        done
        export BLD_HTTP_PORT BLD_SSL_PORT 
		multipartConfig=1
        patchAppwebConf "${dir}/appweb.conf"
    )
fi

if [ "$BLD_FEATURE_PHP" = 1 ] ; then
    cpy src/server/php.ini "${BLD_CFG_PREFIX}"
fi
if [ "$BLD_FEATURE_SSL" = 1 ] ; then
    makeDir "${BLD_CFG_PREFIX}/ssl"
    cpy src/server/ssl/server.* "${BLD_CFG_PREFIX}/ssl"
fi
if [ "$BLD_FEATURE_EJSCRIPT" = 1 ] ; then
    cpy -s -m 755 -d ${BLD_BIN_DIR} ejs${BLD_EXE} "${BLD_BIN_PREFIX}"
    cpy -d ${BLD_LIB_DIR} 'ejs*.mod' "${BLD_LIB_PREFIX}"
#   cpy -m 755 -d ${BLD_BIN_DIR} ejspage "${BLD_BIN_PREFIX}"
fi

#
#   Service startup scripts
#
if [ "$BARE" = 0 ] ; then
    if [ $BLD_HOST_OS = MACOSX ] ; then
        makeDir ${BLD_ROOT_PREFIX}/Library/LaunchDaemons
        cpy -m 644 -e package/MACOSX/com.embedthis.appweb.plist "${BLD_ROOT_PREFIX}/Library/LaunchDaemons"

    elif [ $BLD_HOST_OS = LINUX ] ; then
        makeDir ${BLD_ROOT_PREFIX}/etc/init.d
        if [ "${TASK}" = Package ] ; then
            cpy -m 0755 -e package/LINUX/${BLD_PRODUCT}.init ${BLD_ROOT_PREFIX}/etc/init.d/${BLD_PRODUCT}
        else
            if [ `id -u` = 0 -o "$ROOT_DIR" != "" ] ; then
                if [ "$WITH_OPENWRT" = 1 ] ; then
                    makeDir "${BLD_ROOT_PREFIX}/CONTROL"
                    cpy -e -m 0755 package/LINUX/deb.bin/p* "${BLD_ROOT_PREFIX}/CONTROL"
                    cpy -e -m 0755 package/LINUX/${BLD_PRODUCT}.openwrt "${BLD_ROOT_PREFIX}/etc/init.d/${BLD_PRODUCT}"
                else
                    #
                    #	Daemon start / stop scripts
                    #
                    cpy -e -m 0755 package/LINUX/${BLD_PRODUCT}.init "${BLD_ROOT_PREFIX}/etc/rc.d/${BLD_PRODUCT}"
                    cpy -e -m 0755 package/LINUX/${BLD_PRODUCT}.init "${BLD_ROOT_PREFIX}/etc/init.d/${BLD_PRODUCT}"

                    d=`getpath "${BLD_ROOT_PREFIX}/etc"`
                    for i in 2 3 4 5 ; do
                        ${RM} -f "${d}/rc${i}.d/S81${BLD_PRODUCT}"
                        if [ $TASK != Remove ] ; then
                            makeDir "${d}"/rc${i}.d
                            ${LN} -s "${d}/init.d/${BLD_PRODUCT}" "${d}/rc${i}.d/S81${BLD_PRODUCT}"
                        fi
                    done
                    for i in 0 1 6 ; do
                        ${RM} -f "${d}/rc${i}.d/K15${BLD_PRODUCT}"
                        if [ $TASK != Remove ] ; then
                            makeDir "${d}"/rc${i}.d
                            ${LN} -s "${d}/init.d/${BLD_PRODUCT}" "${d}/rc${i}.d/K15${BLD_PRODUCT}"
                        fi
                    done
                fi
            fi
        fi
    fi

    if [ $BLD_HOST_OS = WIN ] ; then
        clversion=$BLD_CC_CL_VERSION
        if [ "$clversion" = 15 -a -f lib/msvcrt/$BLD_CC_CL_VERSION/msvcr90.dll ] ; then
            cpy -d "lib/msvcrt/$BLD_CC_CL_VERSION" msvcr90.dll Microsoft.VC90.CRT.manifest "${BLD_BIN_PREFIX}"
        elif [ "$clversion" = 16 -a -f lib/msvcrt/$BLD_CC_CL_VERSION/msvcr100.dll ] ; then
            cpy -d "lib/msvcrt/$BLD_CC_CL_VERSION" msvcr100.dll "${BLD_BIN_PREFIX}"
        fi
        cpy ${BLD_BIN_DIR}/appwebMonitor${BLD_EXE} "${BLD_BIN_PREFIX}"
        cpy ${BLD_BIN_DIR}/appwebMonitor.ico "${BLD_BIN_PREFIX}"
        cpy ${BLD_BIN_DIR}/removeFiles${BLD_EXE}* "${BLD_BIN_PREFIX}"
        cpy package/WIN/patchConfig.es "${BLD_BIN_PREFIX}"
#       cpy -m 755 -d ${BLD_BIN_DIR} mvc.cmd ejspage.cmd jem.cmd "${BLD_BIN_PREFIX}"
#       cpy -m 755 -d ${BLD_BIN_DIR} ejspage.cmd "${BLD_BIN_PREFIX}"
    fi
fi

if [ ${BLD_HOST_OS} != "WIN" ] ; then
    export BLD_PRD_PREFIX BLD_INC_PREFIX
    if [ "${TASK}" = Install ] ; then
        if [ "$BARE" = 0 ] ; then
            bash "${BLD_BIN_PREFIX}/linkup" $TASK "$ROOT_DIR"
        fi
    elif [ -f /tmp/linkup$$ ] ; then
        bash /tmp/linkup$$ $TASK "$ROOT_DIR"
        rm -f /tmp/linkup$$
    fi
fi

if [ $BLD_UNIX_LIKE ] ; then
    makeDir "${BLD_MAN_PREFIX}/man1"
    cpy -z -d doc/man appweb.1 angel.1 appwebMonitor.1 http.1 auth.1 makerom.1 "${BLD_MAN_PREFIX}/man1"
fi

