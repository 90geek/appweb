/*
    test.bit
 */

Bit.load({
    targets: {
        testAppweb: {
            type: 'exe',
            headers:   [ '*.h' ],
            sources:   [ '*.c' ],
            depends:   [ 'libappweb' ],
            platforms: [ 'local' ],
        },

        'cgi-bin-testScript': {
            path: 'cgi-bin/testScript',
            build: "
                let path = Path('cgi-bin/testScript')
                path.write('#!' + bit.dir.bin.join('cgiProgram'))
                path.setAttributes({permissions: 0755})
            ",
            'generate-sh': "\
                echo '#!${BIN}/cgiProgram${EXE}' >${HOME}/cgi-bin/testScript ; chmod +x ${HOME}/cgi-bin/testScript
            ",
        },

        'cache.cgi': {
            path: 'web/caching/cache.cgi',
            build: "
                let path = Path('web/caching/cache.cgi')
                path.write('#!' + App.exeDir.join('ejs') + '\n' + 
                    'print(\"HTTP/1.0 200 OK\nContent-Type: text/plain\n\n{number: \" + App.pid + \"}\n\")')
                path.setAttributes({permissions: 0755})
            ",
            'generate-sh': "\
                echo -e '#!`type -p sh`' >${HOME}/web/caching/cache.cgi
                echo -e '' >>${HOME}/web/caching/cache.cgi
                echo -e 'echo HTTP/1.0 200 OK' >>${HOME}/web/caching/cache.cgi
                echo -e 'echo Content-Type: text/plain' >>${HOME}/web/caching/cache.cgi
                echo -e 'date' >>${HOME}/web/caching/cache.cgi
                chmod +x ${HOME}/web/caching/cache.cgi
            ",
        },

        'basic.cgi': {
            path: 'web/basic/basic.cgi',
            build: "
                let path = Path('web/basic/basic.cgi')
                path.write('#!' + App.exeDir.join('ejs') + '\n' + 
                    'print(\"HTTP/1.0 200 OK\nContent-Type: text/plain\n\n\" + serialize(App.env, {pretty: true}) + \"\n\")')
                path.setAttributes({permissions: 0755})
            ",
            'generate-sh': "\
                echo -e '#!`type -p sh`' >${HOME}/web/basic/basic.cgi
                echo -e '' >>${HOME}/web/basic/basic.cgi
                echo -e 'echo Content-Type: text/plain' >>${HOME}/web/basic/basic.cgi
                echo -e '/usr/bin/env' >>${HOME}/web/basic/basic.cgi
                chmod +x ${HOME}/web/basic/basic.cgi
            ",
        },

        'cgi-bin-cgiProgram': {
            path: 'cgi-bin/cgiProgram${EXE}',
            build: "
                let perms = { permissions: 0755 }
                let cgiProgram = bit.dir.bin.join('cgiProgram')
                cp(cgiProgram, Path('cgi-bin/cgiProgram').joinExt(bit.ext.exe), perms)
                cp(cgiProgram, Path('cgi-bin/nph-cgiProgram').joinExt(bit.ext.exe), perms)
                cp(cgiProgram, Path('cgi-bin/cgi Program').joinExt(bit.ext.exe), perms)
                cp(cgiProgram, Path('web/cgiProgram.cgi'), perms)
            ",
            'generate-sh': "\
                cp ${BIN}/cgiProgram ${HOME}/cgi-bin/cgiProgram${EXE}
                cp ${BIN}/cgiProgram ${HOME}/cgi-bin/nph-cgiProgram${EXE}
                cp ${BIN}/cgiProgram '${HOME}/cgi-bin/cgi Program${EXE}'
                cp ${BIN}/cgiProgram ${HOME}/web/cgiProgram.cgi
                chmod +x ${HOME}/cgi-bin/* ${HOME}/web/cgiProgram.cgi
            ",
        },

        test: {
            action: "
                let ro = {noio: true}
                run('utest -v -i 2 --depth ${settings.depth}', ro)
                if (${settings.depth} >= 3) {
                    trace('Test', 'Light load tests')
                    run('utest -v -i 20 --depth ${settings.depth}', ro)
                    for each (t in [2, 4]) {
                        trace('Test', 'Light thread tests')
                        run('utest -v -i 20 --depth ${settings.depth} --threads ' + t, ro)
                    }
                }
                if (${settings.depth} >= 4) {
                    trace('Test', 'Longevity load tests')
                    run('utest -v -i 100 --depth ${settings.depth}', ro)
                    for each (t in [8, 16]) {
                        trace('Test', 'Light thread tests')
                        run('utest -v -i 100 --depth ${settings.depth} --threads ' + t, ro)
                    }
                }
                trace('Test', 'Unit tests complete')
            ",
        },

        'clean-test': {
            type: 'clean',                                                                                 
            action: "                                                                                      
                rm('cache/*')
                rm('app/cache/*')
                rm('junk/**')
            "                                                                                              
        },  
    },
})
