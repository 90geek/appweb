#   appweb.conf -- Appweb unit testing configuration
#
#   WARNING: Do not use this appweb.conf as a sample for your application. It configures everything big, 
#   including: all handlers, filters, caching, limits, hosts and many applications. The result is a very, 
#   very large single web server to test everything. Have a look at src/server/appweb.conf and use that 
#   as the base for your applications.
#   

#   ErrorLog            stdout level=1

#   TraceLog            stdout level=4 formatter=detail format="%h %l %u %t \"%r\" %>s %b %n"
#   TraceLog            stdout level=4 
#   TraceLog            trace.log level=4 size=10MB backup=5 anew

#   Trace               request=1 error=2 result=2 context=3 form=4 body=5 debug=5 content=10K 

Listen                  127.0.0.1:4100      # <HTTPv4>
Listen                  127.0.0.1:4101
<if IPv6>
Listen                  [::1]:4100          # <HTTPv6>
</if>

Documents               web
Cache                   1hour
ExitTimeout             10secs
RequestParseTimeout     30secs
InactivityTimeout       20secs
RequestTimeout          40min
SessionTimeout          20secs

MemoryPolicy            restart

LimitMemory             50MB
LimitBuffer             4K
LimitCache              64K
LimitCacheItem          16K
LimitChunk              16K
LimitClients            10
LimitConnections        10
LimitFiles              0
LimitKeepAlive          400
LimitProcesses          5
LimitRequestsPerClient  6
LimitRequestBody        64MB
LimitRequestForm        32K
LimitRequestHeader      128K
LimitRequestHeaderLines 128 
LimitResponseBody       6GB
LimitSessions           200
LimitUpload             1GB
LimitUri                4K
LimitWorkers            4

UploadAutoDelete        on

AddInputFilter          uploadFilter
AddHandler              fileHandler html gif jpeg jpg png pdf ico css js txt ""

<if DIR_MODULE>
    Options Indexes
    IndexOrder ascending name
    IndexOptions FancyIndexing FoldersFirst
</if>

#
#   Enable the action handler for simple URI to "C" bindings. This is used by the web-form Auth mech.
#
<Route ^/action/>
    SetHandler actionHandler
</Route>

<if ESP_MODULE>
    AddHandler espHandler esp

    EspApp prefix="/solo"       config="esp/solo/esp.json"
    EspApp prefix="/session"    config="esp/session/esp.json"
    EspApp prefix="/websockets" config="esp/websockets/esp.json"
    EspApp prefix="/cache"      config="esp/caching/esp.json"
    EspApp prefix="/autobahn"   config="esp/autobahn/esp.json"
#</Route>

</if>

<if CGI_MODULE>
    AddHandler cgiHandler exe cgi cgi-nph bat cmd pl py
    CgiPrefix "CGI_"
    ScriptAlias /cgi-bin/ "${HOME}/cgi-bin/"
    Action application/x-perl /usr/bin/perl
    Action application/x-python /usr/bin/python
    Action application/x-lua /usr/bin/lua
    Action application/x-ruby /usr/bin/ruby
    Action application/x-php /usr/local/bin/php-cgi
</if>

<if EJS_MODULE>
    AddHandler ejsHandler es ejs
</if>
<if PHP_MODULE>
    AddHandler phpHandler php
</if>

#
#   Test route pattern matching
#   The {2} means match exactly 2 of the previous character
<Route ^/route/(user|admin)/{cmd}/[^a-z]\{2}(\.[hH][tT][mM][lL])$>
    Target write 200 "${cmd}"
</Route>

<Route ^/route/tokens/{cmd}$>
    Target write 200 "${cmd}-${request:query}"
</Route>

<Route ^/route/optional/{controller}(~/{action}~) >
    Target write 200 "${controller}/${action}"
</Route>

#
#   Authentication details
#
Role executive manage direct
Role user view
Role administrator view

User ralph BF1:00128:bWFG5x85BYfuf7GW:w+zzIU0WTZQYaNAe0sPecWyry8Z9GrKH user administrator purchase
User mary 5b90553bea8ba3686f4239d62801f0f3 user executive
User peter 7cdba57892649fd95a540683fdf8fba6 user
User joshua 2fd6e47ff9bb70c0465fd2f5c8e5305e user administrator purchase
User julie 9d8873a123eb506e7f8e84d1f2a26916 user

<Route ^/route/auth>
    Prefix /route/auth
    Documents "${DOCUMENTS}/auth/basic"
    AuthType basic example.com
</Route>

#
#   Language tests
#
<Route ^/lang/root>
    Prefix /lang/root
    AddLanguageDir en english
</Route>

<Route ^/lang/suffix>
    Prefix /lang/suffix
    AddLanguageSuffix en en before
</Route>

<Route ^/lang/target/(.*)(\.html)$>
    Prefix /lang/target
    AddLanguageSuffix en en 
    Target run $1.${request:Language=ge}$2
</Route>

<Route ^/lang/default/(.*)(\.html)$>
    Prefix /lang/default
    AddLanguageSuffix fr fr 
    DefaultLanguage fr
    Target run $1.${request:Language}$2
</Route>

<Route ^/lang/catchall>
    Prefix /lang/catchall
    AddLanguageSuffix "" en before
</Route>

#
#   Header and Param tests
#
<Route ^/route/header>
    RequestHeader User-Agent custom
    Target write 200 "${header:User-Agent}"
</Route>

<Route ^/route/param>
    Param name peter
    Target write 200 "${param:name}"
</Route>

#
#   Condition tests
#
<Route ^/route/cond>
    Condition ! match ${request:scheme} "(https|custom)" 
    Target write 200 "${request:scheme}"
</Route>

#
#   Updates
#
<Route ^/route/update/cmd>
    Update cmd "touch route-update-cmd.tmp"
    Target write 200 "${request:error}UPDATED"
</Route>

<Route ^/route/update/var>
    Update param from ${header:from}
    Target write 200 "${param:from}"
</Route>

#
#   Misc
#
<Route ^/compress/>
    Map compressed
</Route>

#
#   Enable PUT|DELETE
#
<Route ^/tmp/>
    Documents web/tmp
    Prefix /tmp
    Methods add DELETE PUT OPTIONS
    SetHandler fileHandler
</Route>

#
#   Enable TRACE and options
#
<Route ^/trace/>
    Prefix /trace
    Methods add OPTIONS, TRACE
</Route>

#
#   Stealth mode
#
<Route ^/liberal/>
    Prefix /liberal
    Stealth off
    SessionCookie visible=true
    Header remove Content-Security-Policy
    Header remove X-Frame-Options
    Header remove X-XSS-Protection
    Header remove X-Content-Type-Options
</Route>

#
#   Sample to restrict to specific named methods
#
<Route ^/get>
   Prefix /get
   Methods set GET, OPTIONS
</Route>

#
#   Test caching modes: all, unique, only
#
<Route ^/only/>
    Prefix /only
    Documents web/caching 
    # Cache only these exact URIs with request params
    Cache client=30mins server=1day /cache.esp?esp=1&prefix=/only
</Route>
<Route ^/combined/>
    Prefix /combined
    Documents web/caching 
    # Cache these URIs with any request params combined into one item per URI
    Cache server=1day /cache.esp
</Route>
<Route ^/unique/>
    Prefix /unique
    Documents web/caching 
    # Cache each URI+params uniquely
    Cache server=1day unique /cache.esp
</Route>
<Route ^/ext/>
    Prefix /ext
    Documents web/caching 
    Cache server extensions="esp"
</Route>
<Route ^/types/>
    Prefix /types
    Documents web/caching 
    Cache server types="application/x-php"
</Route>
<Route ^/methods/>
    Prefix /methods
    Documents web/caching 
    Cache server methods="POST"
</Route>

#
#   Aliases and CGI
#
Alias /SimpleAlias "${DOCUMENTS}"
Alias /aliasDir/ ${DOCUMENTS}/alias/
Alias /aliasFile ${DOCUMENTS}/alias/atest.html
Alias /AliasDocs/ "${DOCUMENTS}/My Documents/"

<if CGI_MODULE>
    ScriptAlias /MyScripts/ "${HOME}/cgi-bin/"
    ScriptAlias /YourScripts/ "${DOCUMENTS}/"
</if>

#
#   Routes with basic, digest and form-based  authentication
#
<Route ^/auth/basic/>
    AuthType basic example.com
    <Route ^/auth/basic/executive/>
        Require role executive
    </Route>
    <Route ^/auth/basic/joshua/>
        Require user joshua
        # ErrorDocument 403 /notFound.esp
    </Route>
</Route>
<Route ^/auth/blowfish/>
    AuthType basic example.com
    Require user ralph
</Route>
<Route ^/auth/digest/>
    AuthType digest example.com
    <Route ^/auth/digest/executive/>
        Require role executive
    </Route>
    <Route ^/auth/digest/joshua/>
        Require user joshua
    </Route>
</Route>

<Route ^/auth/form/>
    SessionTimeout 10mins
    # SessionCookie name="meomy" persist=false
    AuthType form example.com https:///auth/form/login.esp https:///auth/form/login /auth/form/logout http:///auth/form/index.html
</Route>

#
#   Test error documents
#
<Route ^/error/>
    # Remote URIs and Ejscript will redirect with a 302 status code
    ErrorDocument 404 /notFound.esp
</Route>

#
#   Test simple redirections
#
Redirect temp ^/old.html /index.html
Redirect 410 ^/membersOnly

Defense deny REMEDY=ban STATUS=406 MESSAGE="Client temporarily banned due to monitored limit exceeded" PERIOD=5secs
Monitor "NotFoundErrors > 190" 5sec deny

<Route ^/secure-only>
    Prefix /secure-only
    # Set Strict-Transport-Security max-age and whether subDomains should be included
    Require secure age=30days domains
</Route>

<Route ^/dirlist/>
    Prefix /dirlist
</Route>

<if SSL_MODULE>
    #
    #   Define the TLS endpoint without requiring a virtual host
    #
    ListenSecure 127.0.0.1:4443         # <HTTPSv4>

    SSLCACertificateFile    "crt/ca.crt"        # For client-cert verification (signed test.crt)

    #
    #   test.crt is not a self-signed cert
    #
    SSLCertificateFile      "crt/test.crt"
    SSLCertificateKeyFile   "crt/test.key"

    #
    #   For ECDH (firefox recommended cipher suite)
    #
    # SSLCipherSuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK

    #   
    #   Virtual hosts for SSL certificate tests
    #
    <VirtualHost *:5443>
        ListenSecure 127.0.0.1:5443     # <SELFCERT>
        SSLCertificateFile    "crt/self.crt"
        SSLCertificateKeyFile "crt/self.key"
    </VirtualHost>

    <VirtualHost *:6443>
        ListenSecure 127.0.0.1:6443     # <CLIENTCERT>
        SSLVerifyClient on
        <Route /ssl-match>
            Prefix /ssl-match
            Condition match ${ssl:CLIENT_S_CN} "localhost|example.com"
        </Route>
        # Condition match ${ssl:state} "CN=localhost," 
    </VirtualHost>

    #
    #   Provider specific virtual hosts
    #
    <VirtualHost *:7443>
        ListenSecure 127.0.0.1:7443     # <OPENSSL>
        SSLProvider openssl
        SSLCipherSuite AES128-SHA
        SSLVerifyClient on
    </VirtualHost>

    <VirtualHost *:8443>
        ListenSecure 127.0.0.1:8443     # <MATRIXSSL>
        SSLProvider matrixssl
        SSLVerifyClient on
    </VirtualHost>

    <VirtualHost *:9443>
        ListenSecure 127.0.0.1:9443     # <NANOSSL>
        SSLProvider nanossl
        SSLVerifyClient off
    </VirtualHost>
</if>

Listen 127.0.0.1:4200                   # <NAMED>
<VirtualHost *:4200>
    ServerName  localhost:4200
    Documents   "${HOME}/web/vhost/namehost1"
</VirtualHost>

<VirtualHost *:4200>
    ServerName  *embedthis
    Documents   web
</VirtualHost>

<VirtualHost *:4200>
    ServerName 127.0.0.1:4200
    Documents "${HOME}/web/vhost/namehost2"
    Reset pipeline
    AddHandler fileHandler html gif jpeg jpg png pdf ico css js ""
</VirtualHost>

#
#   IP virtual host
#
Listen 127.0.0.1:4300             # <IPHOST>
<VirtualHost *:4300>
    Documents "${HOME}/web/vhost/iphost"
    AuthType basic example.com
    Require user mary
</VirtualHost>

#
#   Virtual host for CrossOrigin
#
Listen 127.0.0.1:4400
<VirtualHost *:4400>
    Documents   web
</VirtualHost>

# TypesConfig "mime.types"
