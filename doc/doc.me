/*
    doc.me -- MakeMe file for Appweb documentation
 */

Me.load({
    targets: {
        api: {
            action: `
                apidoc('api/appweb.dox', '${SRC}/src/appweb.h', 'APPWEB', 'api/*.tags')
                for each (let f: Path in ['appweb.html', 'http.html', 'mpr.html', 'osdep.html', 'esp.html', 'edi.html']) {
                    let path = Path('out/ref/appweb/api').join(f)
                    trace('Generate', path)
                    let source = Path('api').join(f.trimExt() + 'Bare.html')
                    let contents = source.readString()
                    contents = contents.replace(/\\$/mg, '$$$$')
                    let data = path.readString()
                    path.write(data.
                        replace(/DOC_CONTENT/g, contents).
                        replace(/mprBare.html/g, 'mpr.html').
                        replace(/osdepBare.html/g, 'osdep.html').
                        replace(/httpBare.html/g, 'http.html').
                        replace(/external=\"mpr.dtags\"/g, '').
                        replace(/external=\"http.dtags\"/g, ''))
                }
            `
        }

        'clean-doc': {
            type: 'clean',
            action: `
                rmdir(['../doc/api/html', '../doc/api/xml'])
            `
        },

        validate: {
            depends: [ 'gen-doc' ],
            action: `
                for each (f in Path('out').files('**/*.html')) {
                    let data = f.readString()
                    data = data.replace('700|Open', '').
                        replace(/appweb.download.html/g, 'download/appweb.html').
                        replace(/developers.contributors.html/g, 'scripts/contributors.esp').
                        replace(/\\/developers\\//g, '/appweb/').
                        replace(/nowrap="nowrap"/g, '').
                        replace(/nowrap/g, '')
                    trace('Patch', f)
                    f.write(data)
                }
                for each (f in Path('out').files('**/*.css')) {
                    f.write('.rule {}\n')
                }
/* UNUSED
                for each (f in Path('out').files('man/*.html')) {
                    let data = f.readString().toLowerCase().
                        replace(/&amp/g, '\&amp;').
                        replace(/&gt/g, '\&gt;').
                        replace(/&lt/g, '\&lt;')
                    f.write('<!DOCTYPE html>\n<html lang="eng"><head><title>' + f.basename.trimExt().toString().toPascal() + 
                        ' Man Page</title></head>\n' + data + '</html>')
                }
*/
            `
        },
    },
})
