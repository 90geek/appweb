/*
    doc.me -- MakeMe file for Appweb documentation
 */

Me.load({
    targets: {
        patch: {
            action: "
                trace('Patch', 'Patch version string ${settings.version}')
                let path = Path('product/version.html')
                let settings = me.settings
                path.write(path.readString().replace(/<body>.*<.body>/, '<body>' + settings.version + '</body>'))
                path = Path('dsi/head.html')
                path.write(path.readString().replace(/<title>.*<.title>/, 
                    '<title>' + settings.title + ' ' + settings.version + ' Documentation</title>'))

                trace('Patch', 'Expand DSI')
                let path = Path('dsi/head.html')
                path.write(path.readString().replace(/version\">.*</, 'version\">' + 
                    settings.title + ' ' + settings.version + '<'))
                for each (path in Path('.').files('**.html', {exclude: /Bare.html|dsi/})) {
                    vtrace('Patch', path)
                    run(['dsi', '-I ', path])
                }
            "
        },

        api: {
            action: `
                apidoc('api/appweb.dox', '${SRC}/src/appweb.h', 'APPWEB', 'api/*.tags')
                Path('../src/paks/mpr/doc/api/mprBare.html').copy('api/mprBare.html')
                Path('../src/paks/http/doc/api/httpBare.html').copy('api/httpBare.html')
                Path('../src/paks/esp/doc/api/espBare.html').copy('api/espBare.html')
                Path('../src/paks/esp/doc/api/ediBare.html').copy('api/ediBare.html')
                Path('../src/paks/esp/doc/man/esp.1').copy('man/esp.1')
                for each (let f: Path in ['api/appweb.html', 'api/http.html', 'api/mpr.html', 'api/esp.html', 'api/edi.html']) {
                    trace('Generate', f)
                    apiwrap(f)
                    let data = f.readString() || ''
                    f.write(data.replace(/mprBare.html/g, 'mpr.html').
                       replace(/httpBare.html/g, 'http.html').
                       replace(/external=\"mpr.dtags\"/g, '').
                       replace(/external=\"http.dtags\"/g, ''))
                }
            `,
        },

/* UNUSED
        'esp-doc': {
            action: "
                if (Cmd.locate('ejsc')) {
                    let list = Path('api/esp-angular/masters').files('*.es')
                    run('ejsc --doc '  + list.join(' '))
                    run('ejsmod --html api/esp-angular ' + Path('.').files('*.mod').join(' '))
                    for each (path in Path('api/esp-angular/masters').files(['*.html', '*.css'])) {
                        path.copy('api/esp-angular/' + path.basename)
                    }
                    Path('api/esp-angular/masters/banner.jpg').copy('api/esp-angular/images/banner.jpg')
                    for each (path in Path('.').files('*.mod')) {
                        path.remove()
                    }
                }
            ",
        },
*/

        tidy: {
            action: "
                for each (path in Path('.').files('**.html', { exclude: /\\/$|dsi|Base|Bare/ })) {
                    trace('Tidy', path)
                    run('tidy -q -config tidy.conf ' + path)
                }
            ",
        },

        'validate-doc': {
            action: "
                let vdir = me.dir.cfg.join('validate')
                vdir.removeAll()
                for each (file in Path('.').files('**', { exclude: /\\/$|dsi|Base|Bare/ })) {
                    let out = vdir.join(file)
                    out.dirname.makeDir()
                    if (file.extension == 'html') {
                        out.write(file.readString().replace(/<pre>((?!pre>)(?:.|\\s))*pre>/mg, '<pre>DELETED</pre>'))
                    } else {
                        out.write(file.readString())
                    }
                }
                trace('Prepare', vdir)
            ",
        },

        'clean-doc': {
            type: 'clean',
            action: "
                rmdir(['../doc/api/html', '../doc/api/xml'])
            "
        },
    
    },
})
