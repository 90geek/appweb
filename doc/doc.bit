/*
    doc.bit -- Appweb documentation build file
 */

Bit.load({

    targets: {
        patch: {
            action: "
                trace('Patch', 'Patch version string ${settings.version}')
                let path = Path('product/version.html')
                path.write(path.readString().replace(/<p>.*<.p>/, '<p>' + bit.settings.version + '</p>'))
                path = Path('dsi/head.html')
                path.write(path.readString().replace(/<title>.*<.title>/, 
                    '<title>' + bit.settings.title + ' ' + bit.settings.version + ' Documentation</title>'))

                trace('Patch', 'Expand DSI')
                for each (path in Path('.').glob('**.html', {exclude: /Bare.html|dsi/})) {
                    vtrace('Patch', path)
                    Cmd('dsi -v -I. ' + path)
                }
            "
        },

        api: {
            action: "
                apidoc('api/appweb.dox', '${SRC}/src/appweb.h', 'Appweb API', 'api/*.tags')
                apidoc('api/esp.dox', ['${SRC}/src/esp/edi.h', '${SRC}/src/esp/mdb.h', '${SRC}/src/esp/esp.h'], 
                    'ESP API', ls('api/*.tags'))
                for each (let f: Path in ['api/appweb.html', 'api/http.html', 'api/mpr.html', 'api/esp.html']) {
                    trace('Generate', f)
                    apiwrap(f)
                    f.write(f.readString().replace(/mprBare.html/g, 'mpr.html').
                                           replace(/httpBare.html/g, 'http.html').
                                           replace(/external=\"mpr.dtags\"/g, '').
                                           replace(/external=\"http.dtags\"/g, ''))
                }
            ",
        }, 

        'clean-doc': {
            type: 'clean',
            action: "
                rmdir(['../doc/api/html', '../doc/api/xml'])
            "
        },
    
    },
})
