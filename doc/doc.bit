/*
    doc.bit -- Appweb documentation build file
 */

Bit.load({

    targets: {
        patch: {
            action: "
                trace('Patch', 'Patch version string ${settings.version}')
                let path = Path('product/version.html')
                path.write(path.readString().replace(/<p>.*<.p>/, '<p>' + bit.settings.version + '</p>'))
                path = Path('dsi/head.html')
                path.write(path.readString().replace(/<title>.*<.title>/, 
                    '<title>' + bit.settings.title + ' ' + bit.settings.version + ' Documentation</title>'))

                for each (name in ['mpr', 'http', 'appweb', 'esp']) {
                    trace('Generate', name + '.html')
                    let path = Path('api/' + name + '.html')
                    path.write(Path('api/' + name + 'Header.tem').readString())
                    path.append(Path('api/' + name + 'Bare.html').readString())
                    path.append(Path('api/apiFooter.tem').readString())
                }
            ",
        },

        api: {
            action: "
                apidoc('api/appweb.dox', 'Appweb API', '${SRC}/src/appweb.h', 'api/*.tags')
                apidoc('api/esp.dox', 'ESP API', ['${SRC}/src/esp/edi.h', '${SRC}/src/esp/mdb.h', '${SRC}/src/esp/esp.h'], ls('api/*.tags'))
                apiwrap(['api/appweb.html', 'api/http.html', 'api/mpr.html', 'api/esp.html'])
            ",
        }, 

        'clean-doc': {
            type: 'clean',
            action: "
                rmdir(['../doc/api/html', '../doc/api/xml'])
            "
        },
    
    },
})
